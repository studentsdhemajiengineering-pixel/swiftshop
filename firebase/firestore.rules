/**
 * @fileoverview Firestore Security Rules for SwiftShop.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-centric data model. Most user-generated content is stored under the /users/{userId} path,
 * ensuring that only the authenticated user has access. Publicly readable collections like /categories and /products are available
 * to all users, including unauthenticated ones, for browsing the catalog. More open order collection for all orders that might be accessed by system processes and read by users.
 *
 * Data Structure:
 * - /categories/{categoryId}: Publicly accessible grocery categories.
 * - /products/{productId}: Publicly accessible product details.
 * - /settings/branding: Publicly readable branding settings, writable by admins.
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /users/{userId}/addresses/{addressId}: User addresses, accessible only by the user.
 * - /users/{userId}/orders/{orderId}: User orders, accessible only by the user.
 * - /users/{userId}/supportTickets/{supportTicketId}: User support tickets, accessible only by the user.
 * - /orders/{orderId}: All orders. Readable by specific users based on userId.
 *
 * Key Security Decisions:
 * - User data is strictly segregated and accessible only by the owning user.
 * - Public collections (/categories, /products) are readable by everyone.
 * - The /orders collection is created without rules for write operations.
 *
 * Denormalization for Authorization:
 * - Orders documents include a `userId` field to facilitate ownership checks.
 *
 * Structural Segregation:
 * - Private user data is stored under the /users/{userId} subcollection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the document.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read categories to allow browsing.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read.
     * @deny (create, update, delete) No one can write directly.
     * @principle Public read access for catalog browsing.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read product details to allow browsing.
     * @path /products/{productId}
     * @allow (get, list) Any user can read.
     * @deny (create, update, delete) No one can write directly.
     * @principle Public read access for catalog browsing.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read branding settings, but restricts writes.
     * @path /settings/branding
     * @allow (get, list) Any user can read.
     * @deny (create, update, delete) No one can write directly.
     * @principle Public read access with restricted writes.
     */
    match /settings/branding {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to read, update, and delete their own profile.  Creation is allowed only if the created user's id matches the authenticated user's id.
     * @path /users/{userId}
     * @allow (get, update, delete) User can access their own profile.
     * @allow (create) User can create their own profile if userId matches.
     * @deny (get, update, delete) Access is denied if the user IDs don't match.
     * @principle Enforces user ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own addresses.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (create, get, update, delete, list) User can access their own addresses.
     * @deny (create, get, update, delete, list) Access is denied if the user IDs don't match.
     * @principle Enforces user ownership for address data.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create, get, update, delete, list) User can access their own orders.
     * @deny (create, get, update, delete, list) Access is denied if the user IDs don't match.
     * @principle Enforces user ownership for order data.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own order items within their orders.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (create, get, update, delete, list) User can access their own order items.
     * @deny (create, get, update, delete, list) Access is denied if the user IDs don't match.
     * @principle Enforces user ownership for order item data.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (create, get, update, delete, list) User can access their own support tickets.
     * @deny (create, get, update, delete, list) Access is denied if the user IDs don't match.
     * @principle Enforces user ownership for support ticket data.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own chat messages within their support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (create, get, update, delete, list) User can access their own chat messages.
     * @deny (create, get, update, delete, list) Access is denied if the user IDs don't match.
     * @principle Enforces user ownership for chat message data.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
    /**
     * @description Allows creating of order to any signed in user.
     * @path /orders/{orderId}
     * @allow (create) Any signed-in user can create an order.
     * @allow (get) Signed in user can get if it is his order.
     * @principle Requires authentication for order creation.
     */
    match /orders/{orderId} {
        allow create: if isSignedIn();
        allow get: if isSignedIn() && request.auth.uid == resource.data.userId;
        allow list: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}