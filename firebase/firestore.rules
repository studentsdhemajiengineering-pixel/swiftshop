/**
 * @fileoverview Firestore Security Rules for SwiftShop.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and public-read with owner-write patterns. User-specific data (profiles, addresses, orders, support tickets) is strictly controlled by the owning user. Some top-level collections (categories, branding settings) are publicly readable but only writable by authorized users (currently not implemented).
 *
 * Data Structure:
 * - /categories/{categoryId}: Grocery categories. Publicly readable.
 * - /products/{productId}: Product details. Details unspecified.
 * - /settings/branding: Branding settings. Publicly readable.
 * - /users/{userId}: User profiles. Owner-only access.
 * - /users/{userId}/addresses/{addressId}: User addresses. Owner-only access.
 * - /users/{userId}/orders/{orderId}: User orders. Owner-only access.
 * - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Order items. Owner-only access.
 * - /users/{userId}/supportTickets/{supportTicketId}: Support tickets. Owner-only access.
 * - /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}: Chat messages. Owner-only access.
 * - /orders/{orderId}: All orders. Writable by admins, readable by specific users.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied; listing other users is not permitted.
 * - Ambiguous relationships default to strict owner-only access.
 * - Admin roles are not yet implemented.
 *
 * Denormalization for Authorization:
 *  - To implement true admin authorization, an `admin` boolean or an `adminIds` array would need to be added to a global settings document, and the rules would need to `get()` that document. For this prototyping phase, that level of complexity is omitted.
 *
 * Structural Segregation:
 *  - Private user data is stored under the /users/{userId} collection, separate from potentially public data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to grocery categories. Write access is not granted.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category information.
     * @deny (create, update, delete): No user can create, update, or delete categories in this prototyping phase.
     * @principle Allows public read access while restricting write access for prototyping.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to product details. Write access is not granted.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product information.
     * @deny (create, update, delete): No user can create, update, or delete products in this prototyping phase.
     * @principle Allows public read access while restricting write access for prototyping.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to branding settings. Write access is not granted.
     * @path /settings/branding
     * @allow (get, list): Any user can read branding settings.
     * @deny (create, update, delete): No user can create, update, or delete branding settings in this prototyping phase.
     * @principle Allows public read access while restricting write access for prototyping.
     */
    match /settings/branding {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create): Only the user with matching {userId} can create their profile.
     * @allow (get, update, delete): Only the user with matching {userId} can read, update, or delete their profile.
     * @deny (list): Listing all users is not permitted.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get, update, delete: if isExistingOwner(userId);
      allow create: if isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Enforces user-ownership for user addresses.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (create, get, update, delete, list): Only the user with matching {userId} can create, read, update, delete, or list their addresses.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get, update, delete: if isExistingOwner(userId);
      allow create: if isOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create, get, update, delete, list): Only the user with matching {userId} can create, read, update, delete, or list their orders.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, update, delete: if isExistingOwner(userId);
      allow create: if isOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for order items within a user's order.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (create, get, update, delete, list): Only the user with matching {userId} can create, read, update, delete, or list order items.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get, update, delete: if isExistingOwner(userId);
      allow create: if isOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (create, get, update, delete, list): Only the user with matching {userId} can create, read, update, delete, or list their support tickets.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get, update, delete: if isExistingOwner(userId);
      allow create: if isOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for chat messages within a support ticket.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (create, get, update, delete, list): Only the user with matching {userId} can create, read, update, delete, or list chat messages.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get, update, delete: if isExistingOwner(userId);
      allow create: if isOwner(userId);
      allow list: if isOwner(userId);
    }
    
    /**
     * @description Allows admin write access to all orders. Readable by specific users (not implemented).
     * @path /orders/{orderId}
     * @allow (get, list): Any user can read order information.
     * @deny (create, update, delete): No user can create, update, or delete orders in this prototyping phase.
     * @principle Allows public read access while restricting write access for prototyping.
     */
    match /orders/{orderId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}