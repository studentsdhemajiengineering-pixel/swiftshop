/**
 * @fileoverview Firestore Security Rules for SwiftShop.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection, enforcing strict ownership for user-related data while allowing public read access to certain collections like 'categories' and 'settings'.
 *
 * Data Structure:
 * - Users: /users/{userId} - User profiles.
 * - Addresses: /users/{userId}/addresses/{addressId} - User's addresses.
 * - Orders: /users/{userId}/orders/{orderId} - User's orders.
 * - Order Items: /users/{userId}/orders/{orderId}/orderItems/{orderItemId} - Items within an order.
 * - Support Tickets: /users/{userId}/supportTickets/{supportTicketId} - User's support tickets.
 * - Chat Messages: /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} - Messages within a support ticket.
 * - Categories: /categories/{categoryId} - Grocery categories.
 * - Products: /products/{productId} - Product details.
 * - Branding Settings: /settings/branding - Application branding settings.
 *
 * Key Security Decisions:
 * - Strict User Ownership: All data nested under /users/{userId} is strictly controlled by the authenticated user matching the userId.
 * - Publicly Readable Collections: 'categories' and 'settings/branding' are publicly readable.
 * - No User Listing: Listing all users is not permitted to protect user privacy.
 * - Admin Role (Future): The ruleset anticipates future expansion with admin roles for managing all orders.
 *
 * Denormalization for Authorization:
 * The current ruleset relies on path-based authorization and assumes that the `userId` is correctly embedded within the document path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /categories collection.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read categories to browse.
     * @deny (create, update, delete): Only admins can manage categories (currently disabled, requires admin role implementation).
     * @principle Public Read, Admin Write (future)
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Rules for the /products collection.
     * @path /products/{productId}
     * @allow (get, list): Any user can read products.
     * @deny (create, update, delete): Only admins can manage products (currently disabled, requires admin role implementation).
     * @principle Public Read, Admin Write (future)
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Rules for the /settings/branding document.
     * @path /settings/branding
     * @allow (get): Any user can read the branding settings.
     * @deny (create, update, delete): Only admins can modify branding settings (currently disabled, requires admin role implementation).
     * @principle Public Read, Admin Write (future)
     */
    match /settings/branding {
      allow get: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (create): Allows a user to create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete): Only the user can access and modify their own profile.
     * @deny (list): Listing all users is not allowed.
     * @principle User Ownership
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/addresses collection.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (get, list, create, update, delete): Only the user can manage their own addresses.
     * @principle User Ownership
     */
    match /users/{userId}/addresses/{addressId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/orders collection.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list, create, update, delete): Only the user can manage their own orders.
     * @principle User Ownership
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/orders/{orderId}/orderItems collection.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list, create, update, delete): Only the user can manage their own order items.
     * @principle User Ownership
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

   /**
     * @description Rules for the /users/{userId}/supportTickets collection.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (get, list, create, update, delete): Only the user can manage their own support tickets.
     * @principle User Ownership
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/supportTickets/{supportTicketId}/chatMessages collection.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (get, list, create, update, delete): Only the user can access their own chat messages.
     * @principle User Ownership
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /orders collection.
     * @path /orders/{orderId}
     * @allow (get, list): specific users can read their own orders.
     * @deny (create, update, delete): Only admins can manage orders (currently disabled, requires admin role implementation).
     * @principle Admin Write, Specific User Read (future)
     */
    match /orders/{orderId} {
      allow get, list: if false; // TODO: Add logic for user to read specific order AND admin logic to manage all orders.
      allow create, update, delete: if false; // TODO: Add admin role check
    }
  }
}