rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to categories.
     * @path /categories/{categoryId}
     * @allow (get, list) Anyone can read category data.
     * @deny (create, update, delete) No one can create, update, or delete categories.
     * @principle Allows public reads, restricts writes.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to product details.
     * @path /products/{productId}
     * @allow (get, list) Anyone can read product data.
     * @deny (create, update, delete) No one can create, update, or delete products.
     * @principle Allows public reads, restricts writes.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to branding settings, but restricts writes.
     * @path /settings/branding
     * @allow (get, list) Anyone can read branding settings.
     * @deny (create, update, delete) No one can create, update, or delete branding settings.
     * @principle Allows public reads, restricts writes to admins.
     */
    match /settings/branding {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (get, list) Only the user can read their profile data.
     * @allow (create) A user can create their own profile if the ID matches their auth UID.
     * @allow (update, delete) Only the user can update or delete their own profile.
     * @deny   Any other user attempts to read, create, update, or delete another user's profile.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isCreatingOwnedBy(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for addresses.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (get, list) Only the user can read their address data.
     * @allow (create) A user can create their own address.
     * @allow (update, delete) Only the user can update or delete their own address.
     * @deny   Any other user attempts to read, create, update, or delete another user's address.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list) Only the user can read their order data.
     * @allow (create) A user can create their own order.
     * @allow (update, delete) Only the user can update or delete their own order.
     * @deny   Any other user attempts to read, create, update, or delete another user's order.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for order items.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list) Only the user can read their order item data.
     * @allow (create) A user can create their own order item.
     * @allow (update, delete) Only the user can update or delete their own order item.
     * @deny   Any other user attempts to read, create, update, or delete another user's order item.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (get, list) Only the user can read their support ticket data.
     * @allow (create) A user can create their own support ticket.
     * @allow (update, delete) Only the user can update or delete their own support ticket.
     * @deny   Any other user attempts to read, create, update, or delete another user's support ticket.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for chat messages within support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (get, list) Only the user can read their chat message data.
     * @allow (create) A user can create their own chat message.
     * @allow (update, delete) Only the user can update or delete their own chat message.
     * @deny   Any other user attempts to read, create, update, or delete another user's chat message.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Restricts access to all orders.
     * @path /orders/{orderId}
     * @allow (get) Allows specific users to read their order.
     * @deny (create, update, delete, list) No one can create, update, delete, or list orders.
     * @principle Restricts writes, allows specific reads.
     */
    match /orders/{orderId} {
      allow get: if false; // TODO: Add logic for specific users or roles to read orders.
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Helper function to check if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Helper function to check if the user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Helper function to check if the user is creating a document owned by themselves.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is creating a document owned by themselves, false otherwise.
     */
    function isCreatingOwnedBy(userId) {
        return request.auth.uid == userId;
    }

    /**
     * @description Helper function to check if the user is the owner of the existing document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource.data != null;
    }
  }
}