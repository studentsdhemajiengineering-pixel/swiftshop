/**
 * @fileoverview Firestore Security Rules for SwiftShop.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data
 * (profiles, addresses, orders, support tickets). Data at the top level is generally public.
 *
 * Data Structure:
 * - /categories/{categoryId}: Publicly readable product categories.
 * - /products/{productId}: Publicly readable product details.
 * - /settings/branding: Publicly readable branding settings, admin-writable.
 * - /settings/apiKeys: Admin-writable API keys.
 * - /settings/store: Admin-writable store settings.
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /users/{userId}/addresses/{addressId}: User-specific addresses.
 * - /users/{userId}/orders/{orderId}: User-specific orders.
 * - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: User-specific order items.
 * - /users/{userId}/supportTickets/{supportTicketId}: User-specific support tickets.
 * - /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}: User-specific chat messages.
 * - /orders/{orderId}: Orders accessible by admins and specific users (details unspecified).
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect privacy.
 * - Ambiguous relationships default to strict owner-only access.
 * - The rules do not enforce data types or required fields, only authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Stores grocery categories. Publicly readable to allow browsing.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category data.
     * @deny (create, update, delete): No user can modify category data.
     * @principle Allows public read access to category information.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Stores product details.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product details.
     * @deny (create, update, delete): No user can modify product details.
     * @principle Allows public read access to product information.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Stores branding settings. Publicly readable, admin writable.
     * @path /settings/branding
     * @allow (get, list): Any user can read branding settings.
     * @deny (create, update, delete): No user can modify branding settings.
     * @principle Allows public read access to branding information.
     */
    match /settings/branding {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

      /**
       * @description Stores API keys. Admin writable.
       * @path /settings/apiKeys
       * @allow get, list: if false;
       * @allow create, update, delete: if false;
       * @principle Restricts access to API keys.
       */
      match /settings/apiKeys {
          allow get, list: if false;
          allow create, update, delete: if false;
      }

      /**
       * @description Stores store settings. Admin writable.
       * @path /settings/store
       * @allow get, list: if false;
       * @allow create, update, delete: if false;
       * @principle Restricts access to store settings.
       */
      match /settings/store {
          allow get, list: if false;
          allow create, update, delete: if false;
      }

    /**
     * @description Stores user profiles. Only the user can access their own profile.
     * @path /users/{userId}
     * @allow (get, list): Only the user can read their profile data.
     * @allow (create): User can create their own profile
     * @allow (update, delete): Only the user can modify their profile data.
     * @deny If the user tries to access another user's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Stores user's addresses. Only the user can access their addresses.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (get, list): Only the user can read their address data.
     * @allow (create, update, delete): Only the user can modify their address data.
     * @deny If the user tries to access another user's address.
     * @principle Enforces user-ownership for address data.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) ;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Stores user's orders. Only the user can access their orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list): Only the user can read their order data.
     * @allow (create, update, delete): Only the user can modify their order data.
     * @deny If the user tries to access another user's order.
     * @principle Enforces user-ownership for order data.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Stores order items within an order. Only the user can access their order items.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list): Only the user can read their order item data.
     * @allow (create, update, delete): Only the user can modify their order item data.
     * @deny If the user tries to access another user's order item.
     * @principle Enforces user-ownership for order item data.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Stores user's support tickets. Only the user can access their support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (get, list): Only the user can read their support ticket data.
     * @allow (create, update, delete): Only the user can modify their support ticket data.
     * @deny If the user tries to access another user's support ticket.
     * @principle Enforces user-ownership for support ticket data.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Stores chat messages within a support ticket. Only the user can access their chat messages.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (get, list): Only the user can read their chat message data.
     * @allow (create, update, delete): Only the user can modify their chat message data.
     * @deny If the user tries to access another user's chat message.
     * @principle Enforces user-ownership for chat message data.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

      /**
       * @description Stores all orders. Writable by admins, readable by specific users.
       * @path /orders/{orderId}
       * @allow get, list: if false; // TODO: Refine read permissions for specific users or admins.
       * @allow create, update, delete: if false; // TODO: Implement admin-only write access.
       * @principle Restricts access to orders.
       */
      match /orders/{orderId} {
          allow get, list: if false;  // TODO: Refine read permissions for specific users or admins.
          allow create, update, delete: if false; // TODO: Implement admin-only write access.
      }
  }
}