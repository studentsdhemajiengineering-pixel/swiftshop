/**
 * @fileoverview Firestore Security Rules for SwiftShop.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of public read access for catalog data (categories, products),
 * user-ownership for personal data (users, addresses, orders, support tickets), and restricted
 * access for sensitive settings and API keys.  The goal is to balance ease of access for browsing
 * with strong protection of user data and operational configurations.
 *
 * Data Structure:
 * - /categories/{categoryId}: Publicly available grocery categories.
 * - /products/{productId}: Publicly available product details.
 * - /settings/branding: Publicly readable branding settings.
 * - /settings/apiKeys: Restricted API keys.
 * - /settings/store: Restricted store settings.
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /users/{userId}/addresses/{addressId}: User-specific addresses, accessible only by the user.
 * - /users/{userId}/orders/{orderId}: User-specific orders, accessible only by the user.
 * - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Order items, accessible only by the user.
 * - /users/{userId}/supportTickets/{supportTicketId}: User-specific support tickets, accessible only by the user.
 * - /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}: Chat messages, accessible only by the user.
 * - /orders/{orderId}: All orders, writable by admins, readable by specific users.
 *
 * Key Security Decisions:
 * - Public read access is granted for /categories and /products to facilitate browsing.
 * - User listing is disallowed for privacy reasons.
 * - All user-specific data (profiles, addresses, orders, support tickets) is strictly controlled
 *   using the `isOwner(userId)` function to ensure that only the authenticated user can access their own data.
 * - API keys and store settings are write-protected.  A role-based access control system should be implemented
 *   in the future.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read category information.
     * @path /categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for catalog data.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read product information.
     * @path /products/{productId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for catalog data.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read branding settings.
     * @path /settings/branding
     * @allow (get)
     * @deny (create, update, delete, list)
     * @principle Public read access for branding settings.
     */
    match /settings/branding {
      allow get: if true;
      allow list, create, update, delete: if false;
    }

    /**
     * @description Restricts access to API keys.  Should be writable only by backend or designated admins.
     * @path /settings/apiKeys
     * @allow (none)
     * @deny (get, list, create, update, delete)
     * @principle Strong write protection for sensitive configuration data.
     */
    match /settings/apiKeys {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Restricts access to store settings.  Should be writable only by backend or designated admins.
     * @path /settings/store
     * @allow (none)
     * @deny (get, list, create, update, delete)
     * @principle Strong write protection for sensitive configuration data.
     */
    match /settings/store {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Allows a user to manage their own profile.
     * @path /users/{userId}
     * @allow (create) if request.auth.uid == userId
     * @allow (get, update, delete) if request.auth.uid == userId && resource != null
     * @deny (list)
     * @deny (create) if request.auth.uid != userId
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own addresses.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (create) if request.auth.uid == userId
     * @allow (get, update, delete) if request.auth.uid == userId && resource != null
     * @deny (list)
     * @deny (create) if request.auth.uid != userId
     * @principle Enforces document ownership for addresses.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) if request.auth.uid == userId
     * @allow (get, update, delete) if request.auth.uid == userId && resource != null
     * @deny (list)
     * @deny (create) if request.auth.uid != userId
     * @principle Enforces document ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own order items.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (create) if request.auth.uid == userId
     * @allow (get, update, delete) if request.auth.uid == userId && resource != null
     * @deny (list)
     * @deny (create) if request.auth.uid != userId
     * @principle Enforces document ownership for order items.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (create) if request.auth.uid == userId
     * @allow (get, update, delete) if request.auth.uid == userId && resource != null
     * @deny (list)
     * @deny (create) if request.auth.uid != userId
     * @principle Enforces document ownership for support tickets.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own chat messages.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (create) if request.auth.uid == userId
     * @allow (get, update, delete) if request.auth.uid == userId && resource != null
     * @deny (list)
     * @deny (create) if request.auth.uid != userId
     * @principle Enforces document ownership for chat messages.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
    /**
     * @description Allows read access to specific users and writable by admins
     * @path /orders/{orderId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows read access to specific users.
     */
    match /orders/{orderId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }


    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}