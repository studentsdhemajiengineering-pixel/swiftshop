/**
 * @fileoverview Firestore Security Rules for SwiftShop.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, balancing public readability with strict ownership and role-based access controls for sensitive data. It prioritizes data ownership and restricts unauthorized modifications.
 *
 * Data Structure:
 * - `/categories/{categoryId}`: Publicly readable grocery categories.
 * - `/products/{productId}`: Publicly readable product details.
 * - `/settings/branding`: Publicly readable branding settings, writable by admins.
 * - `/users/{userId}`: User profiles, accessible only to the owning user.
 * - `/users/{userId}/addresses/{addressId}`: User's addresses, accessible only to the owning user.
 * - `/users/{userId}/orders/{orderId}`: User's orders, accessible only to the owning user.
 * - `/users/{userId}/supportTickets/{supportTicketId}`: User's support tickets, accessible only to the owning user.
 *
 * Key Security Decisions:
 * - Public Read Access: Categories, Products, and Branding Settings are publicly readable to facilitate browsing and general app usage.
 * - Strict User Ownership: User profiles, addresses, orders, and support tickets are strictly controlled, allowing only the owning user to access and modify their data.
 * - No User Listing: Listing all users is explicitly denied to prevent information harvesting.
 * - Admin Role (Placeholder): The ruleset includes a placeholder for an admin role. In a real application, this role would be defined and managed (e.g., through a custom claim on the user's JWT).
 *
 * Denormalization for Authorization:
 * None needed at this time.
 *
 * Structural Segregation:
 * Private user data (profiles, addresses, orders, support tickets) is stored under the `/users/{userId}` path, ensuring clear separation from public data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read categories.
     * @path /categories/{categoryId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for all users.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read products.
     * @path /products/{productId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for all users.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read branding settings, but only admins to modify.
     * @path /settings/branding
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read, admin-only write access.
     */
    match /settings/branding {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to read/write their own profile.
     * @path /users/{userId}
     * @allow (create): if isSignedIn() && request.auth.uid == userId
     * @allow (get, list, update, delete): if isOwner(userId)
     * @deny: Listing all users is not allowed.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read/write their own addresses.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (get, list, create, update, delete): if isOwner(userId)
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read/write their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list, create, update, delete): if isOwner(userId)
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read/write their own order items.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list, create, update, delete): if isOwner(userId)
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read/write their own support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (get, list, create, update, delete): if isOwner(userId)
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read/write their own chat messages within a support ticket.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (get, list, create, update, delete): if isOwner(userId)
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores all orders, readable by specific users.
     * @path /orders/{orderId}
     */
    match /orders/{orderId} {
          allow get: if false;
          allow list: if false;
          allow create: if false;
          allow update: if false;
          allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}