/**
 * @fileoverview Firestore Security Rules for SwiftShop.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-related data
 * (profiles, addresses, orders, support tickets) and allows public read access
 * to product and category data.  Write access to branding settings is restricted.
 *
 * Data Structure:
 * - /categories/{categoryId}: Public product categories.
 * - /products/{productId}: Public product details.
 * - /settings/branding: Global branding settings.
 * - /users/{userId}: User profiles.
 * - /users/{userId}/addresses/{addressId}: User addresses.
 * - /users/{userId}/orders/{orderId}: User orders.
 * - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Order items.
 * - /users/{userId}/supportTickets/{supportTicketId}: User support tickets.
 * - /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}: Chat messages.
 *
 * Key Security Decisions:
 * - Users can only access their own profiles and associated data.
 * - Public read access is enabled for categories and products.
 * - Listing of user documents is disallowed for privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read-only access to the categories collection.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category data.
     * @deny (create, update, delete): No user can create, update, or delete categories through the client.
     * @principle Public read access for product browsing.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
    }

    /**
     * @description Allows read-only access to the products collection.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product data.
     * @deny (create, update, delete): No user can create, update, or delete products through the client.
     * @principle Public read access for product browsing.
     */
    match /products/{productId} {
      allow get, list: if true;
    }

    /**
     * @description Controls access to the branding settings document.
     * @path /settings/branding
     * @allow (get): Any user can read branding settings.
     * @deny (create, update, delete): No user can create, update, or delete branding settings through the client.
     */
    match /settings/branding {
      allow get: if true;
    }

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (get, update, delete): Only the user can access their own profile.
     * @allow (create): A user can create their own profile if the userId matches their auth UID.
     * @deny (list): Listing users is not allowed.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get, update, delete: if isOwner(userId);
      allow create: if isOwner(userId);
      allow list: if false;

      /**
       * @description Enforces user-ownership for addresses.
       * @path /users/{userId}/addresses/{addressId}
       * @allow (get, list, create, update, delete): Only the user can access their own addresses.
       * @principle Restricts access to a user's own data tree.
       */
      match /addresses/{addressId} {
        allow get, list, create, update, delete: if isOwner(userId);
      }

      /**
       * @description Enforces user-ownership for orders.
       * @path /users/{userId}/orders/{orderId}
       * @allow (get, list, create, update, delete): Only the user can access their own orders.
       * @principle Restricts access to a user's own data tree.
       */
      match /orders/{orderId} {
        allow get, list, create, update, delete: if isOwner(userId);

        /**
         * @description Enforces user-ownership for order items.
         * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
         * @allow (get, list, create, update, delete): Only the user can access their own order items.
         * @principle Restricts access to a user's own data tree.
         */
        match /orderItems/{orderItemId} {
          allow get, list, create, update, delete: if isOwner(userId);
        }
      }

      /**
       * @description Enforces user-ownership for support tickets.
       * @path /users/{userId}/supportTickets/{supportTicketId}
       * @allow (get, list, create, update, delete): Only the user can access their own support tickets.
       * @principle Restricts access to a user's own data tree.
       */
      match /supportTickets/{supportTicketId} {
        allow get, list, create, update, delete: if isOwner(userId);

        /**
         * @description Enforces user-ownership for chat messages.
         * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
         * @allow (get, list, create, update, delete): Only the user can access their own chat messages.
         * @principle Restricts access to a user's own data tree.
         */
        match /chatMessages/{chatMessageId} {
          allow get, list, create, update, delete: if isOwner(userId);
        }
      }
    }
    /**
     * @description Stores all orders. Writable by admins, readable by specific users.
     * @path /orders/{orderId}
     * @allow (get): Any user can read order data.
     * @allow (list): Any user can list order data.
     * @deny (create, update, delete): No user can create, update, or delete orders through the client.
     */
    match /orders/{orderId} {
       allow get, list: if true;
    }
  }

  // Helper function to determine if the request is from the owner.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isSignedIn() {
    return request.auth != null;
  }
}