/**
 * @fileoverview Firestore Security Rules for SwiftShop.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-related data
 * (profiles, addresses, orders, support tickets) and allows public read access
 * to product and category data.  Write access to categories is not defined
 * and is therefore implicitly denied.
 *
 * Data Structure:
 * - /categories/{categoryId}: Publicly readable product categories.
 * - /products/{productId}: Public product details.
 * - /settings/branding: Publicly readable branding settings.
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /users/{userId}/addresses/{addressId}: User addresses, accessible only by the user.
 * - /users/{userId}/orders/{orderId}: User orders, accessible only by the user.
 * - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Order items, accessible only by the user.
 * - /users/{userId}/supportTickets/{supportTicketId}: User support tickets, accessible only by the user.
 * - /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}: Chat messages, accessible only by the user.
 * - /orders/{orderId}: All orders. Writable by admins, readable by specific users.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Data schema is not strictly enforced in this prototype, focusing on authorization.
 * - Public read access is granted to categories and products.
 * - All write operations on user-related data are restricted to the owning user.
 *
 * Denormalization for Authorization:
 * Not explicitly used in this version, but consider adding fields like `ownerId` to
 * documents to avoid `get()` calls in future iterations.
 *
 * Structural Segregation:
 * User-specific data is stored under the /users/{userId} path, ensuring clear separation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product categories. Write access is not allowed.
     * @path /categories/{categoryId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: if true; // Example of a request that is denied because only read access should be granted.
     * @principle Allows public read access to categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to product details. Write access is not allowed.
     * @path /products/{productId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: if true; // Example of a request that is denied because only read access should be granted.
     * @principle Allows public read access to products.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to branding settings. Write access is not allowed.
     * @path /settings/branding
     * @allow get: if true;
     * @allow list: if false;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: if true; // Example of a request that is denied because only read access should be granted.
     * @principle Allows public read access to branding settings.
     */
    match /settings/branding {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to read and write their own profile.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
     * @allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if request.auth.uid != request.resource.data.id; // Example of a request that is denied because the user ID doesn't match.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own addresses.
     * @path /users/{userId}/addresses/{addressId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.userId == userId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if request.auth.uid != userId; // Example of a request that is denied because the user ID doesn't match.
     * @principle Enforces document ownership for user addresses.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.userId == userId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if request.auth.uid != userId; // Example of a request that is denied because the user ID doesn't match.
     * @principle Enforces document ownership for user orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own order items.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId); //  && request.resource.data.userId == userId;  Cannot access userId here.
     * @allow update: if isExistingOwner(userId); // && request.resource.data.userId == userId; Cannot access userId here.
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if request.auth.uid != userId; // Example of a request that is denied because the user ID doesn't match.
     * @principle Enforces document ownership for user order items.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      // Removed the userId check in create and update, as the user's subcollection path already implies ownership.  In a real implementation, the user relationship should be validated here (e.g., using a get() on the parent order document to verify the userId).
    }

    /**
     * @description Allows a user to read and write their own support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.userId == userId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if request.auth.uid != userId; // Example of a request that is denied because the user ID doesn't match.
     * @principle Enforces document ownership for user support tickets.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own chat messages.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId); // Removed the userId check since it's not available on the request
     * @allow update: if isExistingOwner(userId); // Removed the userId check since it's not available on the request
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if request.auth.uid != userId; // Example of a request that is denied because the user ID doesn't match.
     * @principle Enforces document ownership for user chat messages.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
       // Removed the userId check in create and update, as the user's subcollection path already implies ownership.  In a real implementation, the user relationship should be validated here (e.g., using a get() on the parent support ticket document to verify the userId).
    }

    /**
     * @description Stores all orders. Writable by admins, readable by specific users.
     * @path /orders/{orderId}
     * @allow get: if false;
     * @allow list: if false;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: if true; // Example of a request that is denied because only read access should be granted.
     * @principle Allows public read access to orders.
     */
    match /orders/{orderId} {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}