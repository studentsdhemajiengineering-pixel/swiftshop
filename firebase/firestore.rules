/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user-specific data and allows public read access for certain collections.
 *
 * Data Structure:
 * - /categories/{categoryId}: Publicly readable grocery categories.
 * - /products/{productId}: Public product details.
 * - /settings/branding: Publicly readable branding settings.
 * - /settings/apiKeys: Admin-writable API keys.
 * - /settings/store: Admin-writable store settings.
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /users/{userId}/addresses/{addressId}: User addresses, accessible only by the user.
 * - /users/{userId}/orders/{orderId}: User orders, accessible only by the user.
 * - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Order items, accessible only by the user.
 * - /users/{userId}/supportTickets/{supportTicketId}: User support tickets, accessible only by the user.
 * - /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}: Chat messages, accessible only by the user.
 * - /orders/{orderId}: All orders, writable by admins and readable by specific users.
 *
 * Key Security Decisions:
 * - Users collection is not listable.
 * - Strict ownership is enforced for all user-nested data.
 * - The rules do not perform data validation beyond authorization checks in this prototyping phase.
 * - Admin access is not yet defined but will be required for certain settings and potentially order management.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to grocery categories.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category data.
     * @deny (create, update, delete): No user can create, update, or delete categories through the client.
     * @principle Public read access for product browsing.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to product details.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product data.
     * @deny (create, update, delete): No user can create, update, or delete products through the client.
     * @principle Public read access for product browsing.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to branding settings.
     * @path /settings/branding
     * @allow (get, list): Any user can read branding settings.
     * @deny (create, update, delete): No user can create, update, or delete branding settings through the client.
     * @principle Public read access for branding.
     */
    match /settings/branding {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    
     /**
      * @description Restricts access to API keys. Only authorized users can create, update, or delete.
      * @path /settings/apiKeys
      * @allow (get, list): Any user can read API keys
      * @allow (create, update, delete): No user can create, update, or delete API keys through the client.
      * @principle Restricts access to API keys.
      */
    match /settings/apiKeys {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to store settings. Only authorized users can create, update, or delete.
     * @path /settings/store
     * @allow (get, list): Any user can read Store settings
     * @allow (create, update, delete): No user can create, update, or delete store settings through the client.
     * @principle Restricts access to store settings.
     */
    match /settings/store {
        allow get, list: if true;
        allow create, update, delete: if false;
    }


    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (get): The user can read their own profile.
     * @allow (create): The user can create their own profile if the UID matches the document ID.
     * @allow (update): The user can update their own profile.
     * @allow (delete): The user can delete their own profile.
     * @allow (list): Listing all users is denied.
     * @deny: All other operations are denied.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user addresses.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (get, list): The user can read and list their own addresses.
     * @allow (create, update, delete): The user can create, update, and delete their own addresses.
     * @deny: All other operations are denied.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list): The user can read and list their own orders.
     * @allow (create, update, delete): The user can create, update, and delete their own orders.
     * @deny: All other operations are denied.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for order items within a user's order.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list): The user can read and list their own order items.
     * @allow (create, update, delete): The user can create, update, and delete their own order items.
     * @deny: All other operations are denied.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (get, list): The user can read and list their own support tickets.
     * @allow (create, update, delete): The user can create, update, and delete their own support tickets.
     * @deny: All other operations are denied.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for chat messages within a user's support ticket.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (get, list): The user can read and list their own chat messages.
     * @allow (create, update, delete): The user can create, update, and delete their own chat messages.
     * @deny: All other operations are denied.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Allows admin-level write access to all orders, readable by specific users.
      * @path /orders/{orderId}
      * @allow get, list: if true;
      * @allow create, update, delete: if false;
      * @principle Restricts write access to admins, allows read access to specified users.
      */
     match /orders/{orderId} {
        allow get, list: if true;
        allow create, update, delete: if false;
     }

    // --- Helper Functions ---

    /**
     * @description Checks if the current user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param userId The user ID to compare against the request's auth UID.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource and if the resource exists.
     * @param userId The user ID to compare against the request's auth UID.
     * @return True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}