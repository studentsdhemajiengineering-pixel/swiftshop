/**
 * @fileoverview Firestore Security Rules for SwiftShop.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-centric data model. Most user-generated content is stored under the /users/{userId} path,
 * ensuring that only the authenticated user can create, read, update, or delete their own data.
 * Top-level collections are generally publicly readable but often restricted to owner-only writes.
 *
 * Data Structure:
 * - /categories/{categoryId}: Publicly accessible grocery categories.
 * - /products/{productId}: Publicly accessible product details.
 * - /settings/branding: Publicly readable, admin-writable branding settings.
 * - /users/{userId}: User profiles, accessible only to the owning user.
 * - /users/{userId}/addresses/{addressId}: User-specific addresses.
 * - /users/{userId}/orders/{orderId}: User-specific orders.
 * - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Order items within user-specific orders.
 * - /users/{userId}/supportTickets/{supportTicketId}: User-specific support tickets.
 * - /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}: Chat messages within user-specific support tickets.
 * - /orders/{orderId}: All orders, writable by admins, readable by specific users.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed.
 * - Public read access is granted to /categories and /products to facilitate browsing.
 * - Strict ownership is enforced for data under /users/{userId}.
 * - For /orders/{orderId}, create access is now granted to authenticated users, enforcing that the userId field matches the authenticated user's ID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to grocery categories for all users.
     * @path /categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for browsing.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read access to product details for all users.
     * @path /products/{productId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for browsing.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read access to branding settings for all users, and write access for admins only.
     * @path /settings/branding
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access, restricted writes.
     */
    match /settings/branding {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Implement admin role check.
      allow update: if false; // TODO: Implement admin role check.
      allow delete: if false; // TODO: Implement admin role check.
    }

    /**
     * @description Restricts access to user profiles to the owning user only.
     * @path /users/{userId}
     * @allow (create, get, update, delete, list)
     * @deny When the user is not signed in or not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);

      /**
       * @description Restricts access to user addresses to the owning user only.
       * @path /users/{userId}/addresses/{addressId}
       * @allow (create, get, update, delete, list)
       * @deny When the user is not signed in or not the owner.
       * @principle Enforces document ownership for all operations.
       */
      match /addresses/{addressId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Restricts access to user orders to the owning user only.
       * @path /users/{userId}/orders/{orderId}
       * @allow (create, get, update, delete, list)
       * @deny When the user is not signed in or not the owner.
       * @principle Enforces document ownership for all operations.
       */
      match /orders/{orderId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);

        /**
         * @description Restricts access to order items to the owning user only.
         * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
         * @allow (create, get, update, delete, list)
         * @deny When the user is not signed in or not the owner.
         * @principle Enforces document ownership for all operations.
         */
        match /orderItems/{orderItemId} {
          allow get: if isOwner(userId);
          allow list: if isOwner(userId);
          allow create: if isOwner(userId);
          allow update: if isExistingOwner(userId);
          allow delete: if isExistingOwner(userId);
        }
      }

      /**
       * @description Restricts access to user support tickets to the owning user only.
       * @path /users/{userId}/supportTickets/{supportTicketId}
       * @allow (create, get, update, delete, list)
       * @deny When the user is not signed in or not the owner.
       * @principle Enforces document ownership for all operations.
       */
      match /supportTickets/{supportTicketId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);

        /**
         * @description Restricts access to chat messages to the owning user only.
         * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
         * @allow (create, get, update, delete, list)
         * @deny When the user is not signed in or not the owner.
         * @principle Enforces document ownership for all operations.
         */
        match /chatMessages/{chatMessageId} {
          allow get: if isOwner(userId);
          allow list: if isOwner(userId);
          allow create: if isOwner(userId);
          allow update: if isExistingOwner(userId);
          allow delete: if isExistingOwner(userId);
        }
      }
    }
    /**
     * @description Allows create order for authenticated users, enforcing userId matches the authenticated user's ID
     * @path /orders/{orderId}
     * @allow create, get, update, delete
     * @deny When the user is not signed in or not the owner.
     * @principle Enforces document ownership for all operations.
     */
     match /orders/{orderId} {
       allow get: if isSignedIn();
       allow list: if false;
       allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
       allow update: if false; // TODO: Implement admin role check
       allow delete: if false; // TODO: Implement admin role check
     }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}