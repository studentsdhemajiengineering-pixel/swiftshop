/**
 * @fileoverview Firestore Security Rules for SwiftShop.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of public read access for catalog data (categories, products),
 * user-ownership for personal data (users, addresses, orders, support tickets),
 * and restricted write access for sensitive configuration data (branding settings, API keys, store settings).
 *
 * Data Structure:
 * - `/categories/{categoryId}`: Publicly accessible grocery categories.
 * - `/products/{productId}`: Publicly accessible product details.
 * - `/settings/branding`: Branding settings for the application, write-protected.
 * - `/settings/apiKeys`: API Keys, write-protected.
 * - `/settings/store`: Store settings, write-protected.
 * - `/users/{userId}`: User profiles, accessible only by the user themselves.
 * - `/users/{userId}/addresses/{addressId}`: User addresses, accessible only by the user themselves.
 * - `/users/{userId}/orders/{orderId}`: User orders, accessible only by the user themselves.
 * - `/users/{userId}/orders/{orderId}/orderItems/{orderItemId}`: Order items, accessible only by the user themselves.
 * - `/users/{userId}/supportTickets/{supportTicketId}`: Support tickets, accessible only by the user themselves.
 * - `/users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}`: Chat messages, accessible only by the user themselves.
 * - `/orders/{orderId}`: All orders, readable by specific users and writable by admins.
 *
 * Key Security Decisions:
 * - Categories and products are publicly readable to allow browsing the catalog without authentication.
 * - User listing is implicitly denied by the structure (no top-level `/users` collection).
 * - Strict user-ownership is enforced for all data nested under `/users/{userId}`.
 * - API keys and branding settings are secured against unauthorized modification.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read category information.
     * @path /categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for catalog browsing.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read product information.
     * @path /products/{productId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for catalog browsing.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures branding settings, allowing only authenticated users to write.
     * @path /settings/branding
     * @allow (get, list)
     * @allow (create, update, delete)
     * @deny (create, update, delete) to non-authenticated users
     * @principle Restricts modification of branding settings.
     */
    match /settings/branding {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Secures API keys, allowing only authenticated users to write.
     * @path /settings/apiKeys
     * @allow (create, update, delete)
     * @deny (create, update, delete) to non-authenticated users
     * @principle Restricts modification of API keys.
     */
    match /settings/apiKeys {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if isSignedIn();
      allow delete: if false;
    }

        /**
     * @description Secures store settings, allowing only authenticated users to write.
     * @path /settings/store
     * @allow (create, update, delete)
     * @deny (create, update, delete) to non-authenticated users
     * @principle Restricts modification of store settings.
     */
    match /settings/store {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if isSignedIn();
      allow delete: if false;
    }


    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) if the user's ID matches the authenticated user's UID.
     * @allow (get, update, delete) if the authenticated user is the owner.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces strict user-ownership.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSelfCreation(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for addresses.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (create, get, update, delete) if the authenticated user is the owner.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces strict user-ownership.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create, get, update, delete) if the authenticated user is the owner.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces strict user-ownership.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for order items.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (create, get, update, delete) if the authenticated user is the owner of the parent order.
     * @deny (create, update, delete) if the user is not the owner of the parent order.
     * @principle Enforces strict user-ownership.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (create, get, update, delete) if the authenticated user is the owner.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces strict user-ownership.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for chat messages within support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (create, get, update, delete) if the authenticated user is the owner of the parent support ticket.
     * @deny (create, update, delete) if the user is not the owner of the parent support ticket.
     * @principle Enforces strict user-ownership.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
    
    /**
     * @description Secures all orders, allowing specific users to read and admins to write.
     * @path /orders/{orderId}
     * @allow read for specific users, write for admins.
     * @deny (create, update, delete) to non-admin users.
     * @principle Restricts modification of orders to admins.
     */
    match /orders/{orderId} {
      allow get: if false; // TODO: Implement read access for specific users, potentially with a members map.
      allow list: if false;
      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  function isSelfCreation(userId) {
      return isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
  }
}