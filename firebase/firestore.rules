/**
 * @fileoverview Firestore Security Rules for SwiftShop.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and admin-controlled access.
 * Users can only access their own data (profiles, addresses, orders, support tickets),
 * while admins have broader access to settings and orders.
 *
 * Data Structure:
 * The data is organized hierarchically with user-specific data nested under `/users/{userId}`.
 * Top-level collections like `/categories` and `/products` store public data.
 * Settings are stored under the `/settings` collection.
 * Orders are stored both under `/users/{userId}` and `/orders/{orderId}`
 *
 * Key Security Decisions:
 * - Users can only manage their own data. Listing all users is disallowed.
 * - Categories are publicly readable.
 * - Admin role is determined by the `admin` custom claim or specific email.
 * - API keys are only writable by admins.
 *
 * Denormalization for Authorization:
 * - User-specific collections (addresses, orders, supportTickets) MUST contain a `userId` field
 *   that matches the document ID of the parent `/users/{userId}` document. This enables fast
 *   ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing resource.
     * @param {string} userId - The user ID to compare against the resource's data.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin based on custom claim or email.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
       return isSignedIn() && (request.auth.token.admin == true || request.auth.token.email == "admin@swiftshop.com");
    }

    /**
     * @description Rules for the /categories collection.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category data to display available product categories.
     * @deny (create, update, delete): No user can create, update, or delete categories via the client.
     * @principle Publicly readable, admin-managed data.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /products collection.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product data to display available products.
     * @deny (create, update, delete): No user can create, update, or delete products via the client.
     * @principle Publicly readable, admin-managed data.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /settings/branding document.
     * @path /settings/branding
     * @allow (get): Any user can read branding settings.
     * @allow (update): Only admins can update branding settings.
     * @deny (create, delete): No user can create or delete the branding settings document.
     * @principle Publicly readable, admin-managed data.
     */
    match /settings/branding {
      allow get: if true;
      allow create: if false;
      allow update: if isAdmin();
      allow delete: if false;
      allow list: if false;
    }

    /**
     * @description Rules for the /settings/apiKeys document.
     * @path /settings/apiKeys
     * @allow (update): Only admins can update API keys.
     * @deny (get, create, delete, list): No user can get, create, delete, or list API keys.
     * @principle Admin-only data.
     */
    match /settings/apiKeys {
      allow get: if false;
      allow create: if false;
      allow update: if isAdmin();
      allow delete: if false;
      allow list: if false;
    }

      /**
       * @description Rules for the /settings/store document.
       * @path /settings/store
       * @allow (update): Only admins can update store settings.
       * @deny (get, create, delete, list): No user can get, create, delete, or list store settings.
       * @principle Admin-only data.
       */
    match /settings/store {
        allow get: if false;
        allow create: if false;
        allow update: if isAdmin();
        allow delete: if false;
        allow list: if false;
    }

    /**
     * @description Rules for the /users/{userId} document.
     * @path /users/{userId}
     * @allow (get, update, delete): Only the user can access and modify their own profile.
     * @allow (create): A user can create their own profile if the userId matches their auth UID.
     * @deny (list): Listing all users is disallowed.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/addresses/{addressId} collection.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (get, list, create, update, delete): Only the user can manage their own addresses.
     * @deny: Access is denied if the user is not the owner.
     * @principle Enforces document ownership for addresses.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/orders/{orderId} collection.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list, create, update, delete): Only the user can manage their own orders.
     * @deny: Access is denied if the user is not the owner.
     * @principle Enforces document ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/orders/{orderId}/orderItems/{orderItemId} collection.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list, create, update, delete): Only the user can manage their own order items.
     * @deny: Access is denied if the user is not the owner.
     * @principle Enforces document ownership for order items.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/supportTickets/{supportTicketId} collection.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (get, list, create, update, delete): Only the user can manage their own support tickets.
     * @deny: Access is denied if the user is not the owner.
     * @principle Enforces document ownership for support tickets.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} collection.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (get, list, create, update, delete): Only the user can manage their own chat messages.
     * @deny: Access is denied if the user is not the owner.
     * @principle Enforces document ownership for chat messages.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

      /**
       * @description Rules for the /orders/{orderId} collection.
       * @path /orders/{orderId}
       */
    match /orders/{orderId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
  }
}