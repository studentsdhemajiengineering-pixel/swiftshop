/**
 * @file Firestore Security Rules for SwiftShop
 *
 * @Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * (profiles, addresses, orders, support tickets). Public data (categories, products, branding settings)
 * is generally readable. Write access is restricted based on ownership or, for certain
 * collections, administrative privileges.
 *
 * @Data Structure:
 * - /categories/{categoryId}: Publicly readable categories.
 * - /products/{productId}: Publicly readable products.
 * - /settings/branding: Publicly readable branding settings.
 * - /users/{userId}: User profiles, accessible only to the owning user.
 * - /users/{userId}/addresses/{addressId}: Addresses, accessible only to the owning user.
 * - /users/{userId}/orders/{orderId}: Orders, accessible only to the owning user.
 * - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Order items, accessible only to the owning user.
 * - /users/{userId}/supportTickets/{supportTicketId}: Support tickets, accessible only to the owning user.
 * - /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}: Chat messages, accessible only to the owning user.
 * - /orders/{orderId}: All orders.
 *
 * @Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Default security posture is strict: if a relationship or access pattern is unclear,
 *   access is denied by default.
 * - The rules do not enforce complex data validation, focusing on authorization.
 * - Order placement is only allowed for authenticated users and only if `request.auth.uid == resource.data.userId`
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the resource and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read categories.
     * @path /categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, no write access.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read products.
     * @path /products/{productId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, no write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read branding settings, but no one to write.
     * @path /settings/branding
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, no write access.
     */
    match /settings/branding {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User can create their profile if the ID matches their auth ID.
     * @allow (get, update, delete) User can access their own profile.
     * @deny (create) User cannot create a profile with an ID that doesn't match their auth ID.
     * @deny (get, update, delete) User cannot access another user's profile.
     * @principle Enforces document ownership.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own addresses.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (create) User can create address if the userId matches their auth ID.
     * @allow (get, list, update, delete) User can access their own addresses.
     * @deny (create) User cannot create an address with an userId that doesn't match their auth ID.
     * @deny (get, list, update, delete) User cannot access another user's address.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User can create order if the userId matches their auth ID.
     * @allow (get, list, update, delete) User can access their own orders.
     * @deny (create) User cannot create an order with an userId that doesn't match their auth ID.
     * @deny (get, list, update, delete) User cannot access another user's order.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own order items.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (create) User can create orderItem if the userId matches their auth ID.
     * @allow (get, list, update, delete) User can access their own order items.
     * @deny (create) User cannot create an orderItem with an userId that doesn't match their auth ID.
     * @deny (get, list, update, delete) User cannot access another user's order item.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (create) User can create supportTicket if the userId matches their auth ID.
     * @allow (get, list, update, delete) User can access their own support tickets.
     * @deny (create) User cannot create an supportTicket with an userId that doesn't match their auth ID.
     * @deny (get, list, update, delete) User cannot access another user's support ticket.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own chat messages within a support ticket.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (create) User can create chatMessage if the userId matches their auth ID.
     * @allow (get, list, update, delete) User can access their own chat messages.
     * @deny (create) User cannot create an chatMessage with an userId that doesn't match their auth ID.
     * @deny (get, list, update, delete) User cannot access another user's chat message.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores all orders. Writable by admins, readable by specific users.
     * @path /orders/{orderId}
     * @allow (get, list) User can access orders that belong to them.
     * @allow (create, update, delete) No one can create, update, or delete.
     * @principle Restricts access to orders.
     */
    match /orders/{orderId} {
        allow get, list: if false; // TODO: Implement logic for admin or specific user read access
        allow create, update, delete: if false;
    }
  }
}