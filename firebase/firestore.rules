/**
 * @fileoverview Firestore Security Rules for SwiftShop.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-related data
 * (profiles, addresses, orders, support tickets) and allows public read access
 * to product and category data. Administrative access is not defined, so all write
 * operations on `/settings` are currently disallowed.
 *
 * Data Structure:
 * - `/categories/{categoryId}`: Publicly readable product categories.
 * - `/products/{productId}`: Publicly readable product information.
 * - `/settings/...`: Contains application settings. Write access is currently disallowed.
 * - `/users/{userId}`: User profiles, accessible only to the owning user.
 * - `/users/{userId}/addresses/{addressId}`: Addresses belonging to a specific user, accessible only to that user.
 * - `/users/{userId}/orders/{orderId}`: Orders placed by a specific user, accessible only to that user.
 * - `/users/{userId}/orders/{orderId}/orderItems/{orderItemId}`: Order items within a user's order, accessible only to that user.
 * - `/users/{userId}/supportTickets/{supportTicketId}`: Support tickets opened by a specific user, accessible only to that user.
 * - `/users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}`: Chat messages within a user's support ticket, accessible only to that user.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the user's authentication ID.
 * - Listing of user documents is disallowed for privacy.
 * - No admin role is defined, so settings can't be altered.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 * - The rules do NOT validate data types or required fields (except for ownership on create). This allows rapid data model iteration during the prototyping phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product categories.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category data.
     * @deny (create, update, delete): No user can create, update, or delete categories.
     * @principle Public read access for product browsing.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to product details.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product data.
     * @deny (create, update, delete): No user can create, update, or delete products.
     * @principle Public read access for product browsing.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to branding settings. Currently denies all write operations since there is no admin role defined.
     * @path /settings/branding
     * @allow (get, list): Any user can read branding settings.
     * @deny (create, update, delete): No user can create, update, or delete branding settings.
     * @principle Public read access for branding configuration.
     */
    match /settings/branding {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Controls access to API keys. Currently denies all write operations since there is no admin role defined.
      * @path /settings/apiKeys
      * @allow get, list: if false;
      * @deny (create, update, delete): No user can create, update, or delete API keys.
      */
    match /settings/apiKeys {
          allow get, list: if false;
          allow create, update, delete: if false;
    }

     /**
      * @description Controls access to store settings. Currently denies all write operations since there is no admin role defined.
      * @path /settings/store
      * @allow get, list: if false;
      * @deny (create, update, delete): No user can create, update, or delete store settings.
      */
    match /settings/store {
          allow get, list: if false;
          allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create): The user can create their own profile if the UID matches the document ID.
     * @allow (get, update, delete): The user can access and modify their own profile if the UID matches the document ID and document exists.
     * @deny (list): Listing user documents is not allowed for privacy.
     * @deny (create): Creating a profile with a mismatched UID is prohibited.
     * @deny (update, delete): Modifying or deleting another user's profile is prohibited.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for addresses.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (get, list, create, update, delete): The user can manage their own addresses if the UID matches the parent user ID.
     * @deny (create): Creating an address with a mismatched user ID is prohibited.
     * @deny (update, delete): Modifying or deleting another user's address is prohibited.
     * @principle Enforces document ownership for addresses.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list, create, update, delete): The user can manage their own orders if the UID matches the parent user ID.
     * @deny (create): Creating an order with a mismatched user ID is prohibited.
     * @deny (update, delete): Modifying or deleting another user's order is prohibited.
     * @principle Enforces document ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for order items.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list, create, update, delete): The user can manage their own order items if the UID matches the grandparent user ID.
     * @deny (create): Creating an order item with a mismatched user ID is prohibited.
     * @deny (update, delete): Modifying or deleting another user's order item is prohibited.
     * @principle Enforces document ownership for order items.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (get, list, create, update, delete): The user can manage their own support tickets if the UID matches the parent user ID.
     * @deny (create): Creating a support ticket with a mismatched user ID is prohibited.
     * @deny (update, delete): Modifying or deleting another user's support ticket is prohibited.
     * @principle Enforces document ownership for support tickets.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for chat messages within support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (get, list, create, update, delete): The user can manage their own chat messages if the UID matches the great-grandparent user ID.
     * @deny (create): Creating a chat message with a mismatched user ID is prohibited.
     * @deny (update, delete): Modifying or deleting another user's chat message is prohibited.
     * @principle Enforces document ownership for chat messages.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
    /**
     * @description Stores all orders. Writable by admins, readable by specific users.
     * @path /orders/{orderId}
     * @allow get, list: if false;
     * @allow create, update, delete: if false;
     */
    match /orders/{orderId} {
        allow get, list: if false;
        allow create, update, delete: if false;
    }
  }

  // Helper function to determine if the request is from a signed-in user.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the request is from the owner of the document.
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  // Helper function to determine if the request is from the owner of an existing document.
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
}