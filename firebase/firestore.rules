/**
 * @fileoverview Firestore Security Rules for SwiftShop.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-related data
 * (profiles, addresses, orders, support tickets) and allows public read access
 * to product and category data.  It also includes some special cases for settings and orders.
 *
 * Data Structure:
 * - /categories/{categoryId}: Public product categories.
 * - /products/{productId}: Public product details.
 * - /settings/branding: Branding settings.
 * - /users/{userId}: User profiles.
 * - /users/{userId}/addresses/{addressId}: User's addresses.
 * - /users/{userId}/orders/{orderId}: User's orders.
 * - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Order items.
 * - /users/{userId}/supportTickets/{supportTicketId}: User's support tickets.
 * - /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}: Chat messages.
 * - /orders/{orderId}: All orders (potentially admin access).
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to categories and products.
 * - Strict ownership is enforced for user profiles and related subcollections.
 * - The rules do NOT validate the full data shape.
 *
 * Denormalization for Authorization:
 * - User ID is used in subcollection paths (e.g., /users/{userId}/orders/{orderId}) to
 *   simplify ownership checks and avoid the need for document reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to categories.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category data.
     * @deny (create, update, delete): No one can modify category data through the client.
     * @principle Public read, no writes.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to products.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product data.
     * @deny (create, update, delete): No one can modify product data through the client.
     * @principle Public read, no writes.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to branding settings. Write access should be restricted to admins.
     * @path /settings/branding
     * @allow (get, list): Any user can read branding settings.
     * @deny (create, update, delete): No one can modify branding settings through the client.
     * @principle Public read, restricted writes.
     */
    match /settings/branding {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (get, update, delete): Only the user can access their profile.
     * @allow (create): A user can create their own profile if the userId matches their auth.uid.
     * @deny (get, update, delete): Another user cannot access this profile.
     * @deny (create): A user cannot create a profile with a different userId.
     * @principle User-ownership.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isCreatingOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for addresses.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (get, list, create, update, delete): Only the user can access their addresses.
     * @deny (get, list, create, update, delete): Another user cannot access this address.
     * @principle User-ownership.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list, create, update, delete): Only the user can access their orders.
     * @deny (get, list, create, update, delete): Another user cannot access this order.
     * @principle User-ownership.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for order items.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list, create, update, delete): Only the user can access their order items.
     * @deny (get, list, create, update, delete): Another user cannot access these order items.
     * @principle User-ownership.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (get, list, create, update, delete): Only the user can access their support tickets.
     * @deny (get, list, create, update, delete): Another user cannot access this support ticket.
     * @principle User-ownership.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for chat messages within support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (get, list, create, update, delete): Only the user can access their chat messages.
     * @deny (get, list, create, update, delete): Another user cannot access these chat messages.
     * @principle User-ownership.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

     /**
      * @description Stores all orders. Writable by admins, readable by specific users.
      * @path /orders/{orderId}
      */
    match /orders/{orderId} {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource.
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

    // Helper function to determine if the user is creating a resource where they are the owner.
  function isCreatingOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  // Helper function to determine if the user is the owner of the existing resource.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}