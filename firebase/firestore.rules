/**
 * @fileoverview Firestore Security Rules for SwiftShop.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model. It allows public read access to certain collections like 'categories', 'products', and 'branding settings' while strictly controlling write access to those collections based on user authentication. User-specific data (profiles, addresses, orders, support tickets) is secured under the `/users/{userId}` path, ensuring that only the authenticated user can access their own data.
 *
 * Data Structure:
 * - `/categories/{categoryId}`: Stores grocery categories. Publicly readable, authenticated-user-only writable.
 * - `/products/{productId}`: Stores product details. Publicly readable, authenticated-user-only writable.
 * - `/settings/branding`: Stores branding settings. Publicly readable, non-writable.
 * - `/users/{userId}`: Stores user profiles. Owner-only access.
 * - `/users/{userId}/addresses/{addressId}`: Stores user addresses. Owner-only access.
 * - `/users/{userId}/orders/{orderId}`: Stores user orders. Owner-only access.
 * - `/users/{userId}/orders/{orderId}/orderItems/{orderItemId}`: Stores order items. Owner-only access.
 * - `/users/{userId}/supportTickets/{supportTicketId}`: Stores support tickets. Owner-only access.
 * - `/users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}`: Stores chat messages. Owner-only access.
 * - `/orders/{orderId}`: Stores all orders. Publicly readable, non-writable.
 *
 * Key Security Decisions:
 * - User listing is disabled to prevent unauthorized access to user data.
 * - The branding settings collection is read-only to prevent unauthorized modification.
 * - All write operations on user-owned data are restricted to the owner using the `isOwner()` helper function.
 *
 * Denormalization for Authorization:
 *  - The rules rely on the `request.auth.uid` to match the `userId` in the path, ensuring that only the authenticated user can access their own data. No denormalization is explicitly required in the initial rules but should be kept in mind for future iterations.
 *
 * Structural Segregation:
 * - User-specific data is stored under the `/users/{userId}` path, ensuring clear separation and secure access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grocery categories: public read, authenticated write
     * @path /categories/{categoryId}
     * @allow (get, list): if true
     * @allow (create, update, delete): User with auth can create/update/delete categories. (isSignedIn())
     * @deny (create, update, delete): if !isSignedIn()
     * @principle Allows public read access while restricting write access to authenticated users only.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Products: public read, authenticated write
     * @path /products/{productId}
     * @allow (get, list): if true
     * @allow (create, update, delete): User with auth can create/update/delete products. (isSignedIn())
     * @deny (create, update, delete): if !isSignedIn()
     * @principle Allows public read access while restricting write access to authenticated users only.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Branding settings: public read, no write
     * @path /settings/branding
     * @allow (get, list): if true
     * @deny (create, update, delete): No one can create/update/delete branding settings.
     * @principle Branding settings are globally readable but non-modifiable via the client.
     */
    match /settings/branding {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to user profiles to the owning user.
     * @path /users/{userId}
     * @allow (get, create): User can only get/create their own profile. (isOwner(userId))
     * @allow (update, delete): User can only update/delete their own profile if it exists. (isExistingOwner(userId))
     * @deny list: Listing all users is forbidden.
     * @deny (get, create, update, delete): if !isOwner(userId)
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to user addresses to the owning user.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (get, list, create): User can only get/list/create their own address. (isOwner(userId))
     * @allow (update, delete): User can only update/delete their own address if it exists. (isExistingOwner(userId))
     * @deny (get, list, create, update, delete): if !isOwner(userId)
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to user orders to the owning user.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list, create): User can only get/list/create their own order. (isOwner(userId))
     * @allow (update, delete): User can only update/delete their own order if it exists. (isExistingOwner(userId))
     * @deny (get, list, create, update, delete): if !isOwner(userId)
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to order items to the owning user.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list, create): User can only get/list/create their own order item. (isOwner(userId))
     * @allow (update, delete): User can only update/delete their own order item if it exists. (isExistingOwner(userId))
     * @deny (get, list, create, update, delete): if !isOwner(userId)
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to user support tickets to the owning user.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (get, list, create): User can only get/list/create their own support ticket. (isOwner(userId))
     * @allow (update, delete): User can only update/delete their own support ticket if it exists. (isExistingOwner(userId))
     * @deny (get, list, create, update, delete): if !isOwner(userId)
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to chat messages to the owning user.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (get, list, create): User can only get/list/create their own chat message. (isOwner(userId))
     * @allow (update, delete): User can only update/delete their own chat message if it exists. (isExistingOwner(userId))
     * @deny (get, list, create, update, delete): if !isOwner(userId)
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allow read access to a single order
     * @path /orders/{orderId}
     * @allow get: if true
     * @deny list: Listing all orders is forbidden.
     * @deny create, update, delete: No one can create/update/delete orders.
     * @principle Read access to a single order is publicly accessible.
     */
    match /orders/{orderId} {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // âœ… Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}