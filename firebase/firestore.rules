/**
 * @fileOverview Firestore Security Rules for SwiftShop.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and public-read/owner-write patterns. User-specific data (profiles, addresses, orders, support tickets) is strictly controlled by the owning user. Public product and category data is readable by all.
 *
 * Data Structure:
 * - /categories/{categoryId}: Publicly readable product categories.
 * - /products/{productId}: Publicly readable product details.
 * - /settings/{settingId}: Settings.
 * - /users/{userId}: User profiles, accessible only by the user.
 *   - /users/{userId}/addresses/{addressId}: User's addresses, accessible only by the user.
 *   - /users/{userId}/orders/{orderId}: User's orders, accessible only by the user.
 *     - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Order items, accessible only by the user.
 *   - /users/{userId}/supportTickets/{supportTicketId}: User's support tickets, accessible only by the user.
 *     - /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}: Chat messages, accessible only by the user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations require authentication.
 * - Data validation is minimal to allow for rapid prototyping.  Only authorization-critical fields are validated.
 * - The `/orders/{orderId}` collection is currently ambiguously defined.  For now, it is locked down.
 *
 * Denormalization for Authorization:
 * - User-specific data is nested under `/users/{userId}` to simplify ownership checks.
 *
 * Structural Segregation:
 * - Public product and category data is stored in top-level collections, separate from private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read product categories.
     * @path /categories/{categoryId}
     * @allow (get, list): if true (Public read access)
     * @deny (create, update, delete): if false (No public write access)
     * @principle Allows public listing and reading of categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read product details.
     * @path /products/{productId}
     * @allow (get, list): if true (Public read access)
     * @deny (create, update, delete): if false (No public write access)
     * @principle Allows public listing and reading of products.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

        /**
     * @description Allows anyone to read branding settings, but only admins to write.
     * @path /settings/branding
     * @allow get, list: if true (Public read access)
     * @deny (create, update, delete): if false (No public write access)
     */
    match /settings/branding {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check for writes
    }

        /**
     * @description Allows only admins to write API keys.
     * @path /settings/apiKeys
     * @deny get, list: if false;
     * @deny (create, update, delete): if false (No write access)
     */
    match /settings/apiKeys {
      allow get, list: if false;
      allow create, update, delete: if false; // TODO: Add admin role check for writes
    }

        /**
     * @description Allows only admins to write store settings.
     * @path /settings/store
     * @deny get, list: if false;
     * @deny (create, update, delete): if false (No write access)
     */
    match /settings/store {
      allow get, list: if false;
      allow create, update, delete: if false; // TODO: Add admin role check for writes
    }

    /**
     * @description Allows a user to read and write their own profile.
     * @path /users/{userId}
     * @allow (get, list): if isOwner(userId) (Read access to owner only)
     * @allow create: if isOwner(userId) (Self-creation)
     * @allow (update, delete): if isExistingOwner(userId) (Update/delete access to existing owner only)
     * @deny create: if !isSignedIn() (All writes require authentication)
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own addresses.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (get, list): if isOwner(userId) (Read access to owner only)
     * @allow create: if isOwner(userId) (Create access to owner only)
     * @allow (update, delete): if isExistingOwner(userId) (Update/delete access to existing owner only)
     * @deny create: if !isSignedIn() (All writes require authentication)
     * @principle Enforces user-ownership for address data.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list): if isOwner(userId) (Read access to owner only)
     * @allow create: if isOwner(userId) (Create access to owner only)
     * @allow (update, delete): if isExistingOwner(userId) (Update/delete access to existing owner only)
     * @deny create: if !isSignedIn() (All writes require authentication)
     * @principle Enforces user-ownership for order data.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own order items.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list): if isOwner(userId) (Read access to owner only)
     * @allow create: if isOwner(userId) (Create access to owner only)
     * @allow (update, delete): if isExistingOwner(userId) (Update/delete access to existing owner only)
     * @deny create: if !isSignedIn() (All writes require authentication)
     * @principle Enforces user-ownership for order item data.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (get, list): if isOwner(userId) (Read access to owner only)
     * @allow create: if isOwner(userId) (Create access to owner only)
     * @allow (update, delete): if isExistingOwner(userId) (Update/delete access to existing owner only)
     * @deny create: if !isSignedIn() (All writes require authentication)
     * @principle Enforces user-ownership for support ticket data.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own chat messages within a support ticket.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (get, list): if isOwner(userId) (Read access to owner only)
     * @allow create: if isOwner(userId) (Create access to owner only)
     * @allow (update, delete): if isExistingOwner(userId) (Update/delete access to existing owner only)
     * @deny create: if !isSignedIn() (All writes require authentication)
     * @principle Enforces user-ownership for chat message data.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description  NOT CLEARLY DEFINED.  DENYING ALL ACCESS BY DEFAULT.
     * @path /orders/{orderId}
     * @deny get, list: if false;
     * @deny create, update, delete: if false;
     */
    match /orders/{orderId} {
      allow get, list: if false;
      allow create, update, delete: if false;
      // TODO: Determine the access pattern for this collection. Is it admin-only, or shared access?
    }

  }

  /**
   * @description Checks if the user is signed in.
   * @return {boolean} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the request is made by the owner of the resource.
   * @param {string} userId The user ID to compare with the request's auth UID.
   * @return {boolean} True if the user is the owner, false otherwise.
   */
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  /**
   * @description Checks if the request is made by the owner of the resource and the resource exists.
   * @param {string} userId The user ID to compare with the request's auth UID.
   * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}