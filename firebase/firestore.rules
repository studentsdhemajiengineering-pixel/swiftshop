/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user-specific data
 * and allows public read access to product catalogs.
 *
 * Data Structure:
 * - /categories/{categoryId}: Publicly readable product categories.
 * - /products/{productId}: Publicly readable product details.
 * - /settings/{settingId}: Place to store setting details.
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /users/{userId}/addresses/{addressId}: User addresses, accessible only by the user.
 * - /users/{userId}/orders/{orderId}: User orders, accessible only by the user.
 * - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Order items, accessible only by the user.
 * - /users/{userId}/supportTickets/{supportTicketId}: User support tickets, accessible only by the user.
 * - /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}: Chat messages, accessible only by the user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Ambiguous relationships default to owner-only access.
 * - Settings are only writable by admins
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product categories.
     * @path /categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, restricts write access.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to product details.
     * @path /products/{productId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, restricts write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to branding settings, writable by admins only.
     * @path /settings/branding
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, restricts write access to admins.
     */
    match /settings/branding {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to apiKeys, writable by admins only.
     * @path /settings/apiKeys
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, restricts write access to admins.
     */
    match /settings/apiKeys {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to store settings, writable by admins only.
     * @path /settings/store
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, restricts write access to admins.
     */
    match /settings/store {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User can create their own profile.
     * @allow (get, update, delete) User can only access their own profile.
     * @deny (list) User listing is disallowed.
     * @deny (create, update, delete) If the user is not signed in.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get, update, delete: if isSignedIn() && isOwner(userId) && resource != null;
      allow create: if isSignedIn() && isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Enforces user-ownership for user addresses.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (get, list, create, update, delete) User can only access their own addresses.
     * @deny (create, update, delete) If the user is not signed in.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces user-ownership for user orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list, create, update, delete) User can only access their own orders.
     * @deny (create, update, delete) If the user is not signed in.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces user-ownership for order items.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list, create, update, delete) User can only access their own order items.
     * @deny (create, update, delete) If the user is not signed in.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces user-ownership for support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (get, list, create, update, delete) User can only access their own support tickets.
     * @deny (create, update, delete) If the user is not signed in.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces user-ownership for chat messages.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (get, list, create, update, delete) User can only access their own chat messages.
     * @deny (create, update, delete) If the user is not signed in.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to all orders, writable by admins only.
     * @path /orders/{orderId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, restricts write access to admins.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}