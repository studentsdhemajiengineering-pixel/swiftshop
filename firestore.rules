/**
 * @fileoverview Firestore Security Rules for SwiftShop.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * while allowing public read access to product catalog data (categories and products).
 *
 * Data Structure:
 * - /categories/{categoryId}: Publicly readable product categories.
 * - /products/{productId}: Publicly readable product details.
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /users/{userId}/addresses/{addressId}: User addresses, accessible only by the user.
 * - /users/{userId}/orders/{orderId}: User orders, accessible only by the user.
 * - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Order items, accessible only by the user.
 * - /users/{userId}/supportTickets/{supportTicketId}: User support tickets, accessible only by the user.
 * - /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}: Chat messages, accessible only by the user.
 *
 * Key Security Decisions:
 * - Publicly readable product catalog (categories, products).
 * - User-owned data tree under /users/{userId}.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 *  - User-specific data is nested under /users/{userId} to avoid get() calls
 *    and simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product categories.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read category data.
     * @deny (create, update, delete) No one can create, update, or delete categories through the client.  These are managed server-side.
     * @principle Allows public read access for browsing product categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to product details.
     * @path /products/{productId}
     * @allow (get, list) Any user can read product data.
     * @deny (create, update, delete) No one can create, update, or delete products through the client.  These are managed server-side.
     * @principle Allows public read access for browsing product details.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user profiles, accessible only by the user.
     * @path /users/{userId}
     * @allow (create) Only the user can create their own profile.
     * @allow (get, update, delete) Only the user can access or modify their own profile.
     * @deny Any other operation is denied.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages user addresses, accessible only by the user.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (create) Only the user can create their own address.
     * @allow (get, update, delete, list) Only the user can access or modify their own addresses.
     * @deny Any other operation is denied.
     * @principle Enforces document ownership for user addresses.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages user orders, accessible only by the user.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) Only the user can create their own order.
     * @allow (get, update, delete, list) Only the user can access or modify their own orders.
     * @deny Any other operation is denied.
     * @principle Enforces document ownership for user orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages order items, accessible only by the user who owns the order.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (create) Only the user can create their own order item.
     * @allow (get, update, delete, list) Only the user can access or modify their own order items.
     * @deny Any other operation is denied.
     * @principle Enforces document ownership for order items.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages user support tickets, accessible only by the user.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (create) Only the user can create their own support ticket.
     * @allow (get, update, delete, list) Only the user can access or modify their own support tickets.
     * @deny Any other operation is denied.
     * @principle Enforces document ownership for user support tickets.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages chat messages within a support ticket, accessible only by the user who owns the ticket.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (create) Only the user can create their own chat message.
     * @allow (get, update, delete, list) Only the user can access or modify their own chat messages.
     * @deny Any other operation is denied.
     * @principle Enforces document ownership for chat messages.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // ========================= Helper Functions =========================

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource based on the userId.
     * @param {string} userId - The user ID to compare with the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing resource.
     *              This function combines the ownership check with an existence check.
     * @param {string} userId - The user ID to compare with the authenticated user's ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}