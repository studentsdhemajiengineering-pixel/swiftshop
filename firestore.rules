/**
 * @fileoverview Firestore Security Rules for SwiftShop.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * while allowing public read access to product catalog information.
 *
 * Data Structure:
 * - /categories/{categoryId}: Publicly readable product categories.
 * - /products/{productId}: Publicly readable product details.
 * - /users/{userId}: User profiles, accessible only by the owning user.
 * - /users/{userId}/addresses/{addressId}: User addresses, accessible only by the owning user.
 * - /users/{userId}/orders/{orderId}: User orders, accessible only by the owning user.
 * - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Order items, accessible only by the owning user.
 * - /users/{userId}/supportTickets/{supportTicketId}: Support tickets, accessible only by the owning user.
 * - /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}: Chat messages, accessible only by the owning user.
 *
 * Key Security Decisions:
 * - Categories and Products are publicly readable.
 * - User data is strictly controlled by user-ownership.
 * - Listing of other users' data is disallowed.
 *
 * Denormalization for Authorization:
 *   This ruleset avoids `get()` calls by relying on path-based ownership. For example,
 *   the rules for `addresses` under `/users/{userId}` directly use the `userId` parameter
 *   to enforce ownership, instead of needing to read the user document.
 *
 * Structural Segregation:
 *   Publicly readable data (categories, products) is stored in top-level collections,
 *   while private user data is stored under the `/users/{userId}` path. This segregation
 *   simplifies read access for public data and strengthens the user-ownership model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to categories.
     * @path /categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Publicly readable data.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to products.
     * @path /products/{productId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Publicly readable data.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (get, update, delete) to the owner.
     * @allow (create) if the user ID matches the authenticated user's ID.
     * @deny (list) to prevent listing all users.
     * @deny writes to any other user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for addresses.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (get, list, create, update, delete) to the owner.
     * @deny writes to any other user.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list, create, update, delete) to the owner.
     * @deny writes to any other user.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for order items.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list, create, update, delete) to the owner.
     * @deny writes to any other user.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Enforces user-ownership for support tickets.
      * @path /users/{userId}/supportTickets/{supportTicketId}
      *  @allow (get, list, create, update, delete) to the owner.
      * @deny writes to any other user.
      * @principle Restricts access to a user's own data tree.
      */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for chat messages.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (get, list, create, update, delete) to the owner.
     * @deny writes to any other user.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}