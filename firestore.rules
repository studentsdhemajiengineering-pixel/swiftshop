/**
 * @description This ruleset enforces a strict user-ownership model for user-specific data while allowing public read access to product categories and branding settings.
 * @dataStructure
 *   - /categories/{categoryId}: Stores publicly readable product categories.
 *   - /products/{productId}: Stores product details (permissions TBD).
 *   - /settings/branding: Stores publicly readable branding settings.
 *   - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 *   - /users/{userId}/addresses/{addressId}: Stores user addresses, accessible only by the user themselves.
 *   - /users/{userId}/orders/{orderId}: Stores user orders, accessible only by the user themselves.
 *   - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Stores order items, accessible only by the user themselves.
 *   - /users/{userId}/supportTickets/{supportTicketId}: Stores support tickets, accessible only by the user themselves.
 *   - /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}: Stores chat messages, accessible only by the user themselves.
 * @keySecurityDecisions
 *   - User listing is disallowed.
 *   - Public read access is granted for categories and branding settings.
 *   - Strict owner-only access is enforced for all user-specific data.
 * @denormalizationForAuthorization
 *   - User-specific data is nested under /users/{userId} to enable path-based authorization, avoiding the need for `get()` calls.
 * @structuralSegregation
 *   - Publicly readable categories are stored in a top-level collection separate from user-specific data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read the product categories, but restricts creation, update, and deletion.
     * @path /categories/{categoryId}
     * @allow (get, list) Allows any user (signed in or not) to read the category.
     * @deny (create, update, delete) Denies any user to create, update or delete categories.
     * @principle Allows public reads, restricts writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read the branding settings, but restricts creation, update, and deletion.
     * @path /settings/branding
     * @allow (get) Allows any user (signed in or not) to read the branding settings.
     * @deny (create, update, delete) Denies any user to create, update or delete the branding settings.
     * @principle Allows public reads, restricts writes.
     */
    match /settings/branding {
          allow get: if true;
          allow list: if false;
          allow create, update, delete: if false;
    }

    /**
     * @description Manages products. No ownership is defined, so writes are disabled.
     * @path /products/{productId}
     * @allow (get, list) Allows any user to read or list products.
     * @deny (create, update, delete) Denies any user to create, update, or delete products.
     * @principle Restricts access until ownership model is defined.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) Allows a user to create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) Allows a user to read, update, and delete their own profile if the userId matches their auth UID.
     * @deny (create, get, update, delete) Denies access if the userId does not match the auth UID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own addresses.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (create) Allows a user to create an address if the userId matches their auth UID.
     * @allow (get, update, delete) Allows a user to read, update, and delete their own address if the userId matches their auth UID.
     * @deny (create, get, update, delete) Denies access if the userId does not match the auth UID.
     * @principle Enforces document ownership for addresses.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) Allows a user to create an order if the userId matches their auth UID.
     * @allow (get, update, delete) Allows a user to read, update, and delete their own order if the userId matches their auth UID.
     * @deny (create, get, update, delete) Denies access if the userId does not match the auth UID.
     * @principle Enforces document ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own order items.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (create) Allows a user to create an order item if the userId matches their auth UID.
     * @allow (get, update, delete) Allows a user to read, update, and delete their own order item if the userId matches their auth UID.
     * @deny (create, get, update, delete) Denies access if the userId does not match the auth UID.
     * @principle Enforces document ownership for order items.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (create) Allows a user to create a support ticket if the userId matches their auth UID.
     * @allow (get, update, delete) Allows a user to read, update, and delete their own support ticket if the userId matches their auth UID.
     * @deny (create, get, update, delete) Denies access if the userId does not match the auth UID.
     * @principle Enforces document ownership for support tickets.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own chat messages within a support ticket.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (create) Allows a user to create a chat message if the userId matches their auth UID.
     * @allow (get, update, delete) Allows a user to read, update, and delete their own chat message if the userId matches their auth UID.
     * @deny (create, get, update, delete) Denies access if the userId does not match the auth UID.
     * @principle Enforces document ownership for chat messages.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}