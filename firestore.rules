/**
 * @fileoverview Firestore Security Rules for SwiftShop.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data and allows public read access to product catalog information.
 *
 * Data Structure:
 * - `/categories/{categoryId}`: Publicly readable product categories.
 * - `/products/{productId}`: Publicly readable product information.
 * - `/settings/branding`: Public branding configurations.
 * - `/users/{userId}`: User profiles, accessible only by the owning user.
 * - `/users/{userId}/addresses/{addressId}`: User's addresses, accessible only by the owning user.
 * - `/users/{userId}/orders/{orderId}`: User's orders, accessible only by the owning user.
 * - `/users/{userId}/orders/{orderId}/orderItems/{orderItemId}`: Order items, accessible only by the owning user.
 * - `/users/{userId}/supportTickets/{supportTicketId}`: User's support tickets, accessible only by the owning user.
 * - `/users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}`: Chat messages, accessible only by the owning user.
 *
 * Key Security Decisions:
 * - Listing of user documents is disallowed to prevent data leakage.
 * - Categories and Products are publicly readable to allow for easy browsing.
 * - All user-specific data is nested under `/users/{userId}` and secured with `isOwner(userId)`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to categories.
     * @path /categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows anyone to read categories, but restricts writing.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to products.
     * @path /products/{productId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows anyone to read products, but restricts writing.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Allows public read access to branding settings.
      * @path /settings/branding
      * @allow (get, list)
      * @deny (create, update, delete)
      * @principle Allows anyone to read branding settings, but restricts writing.
      */
     match /settings/branding {
       allow get, list: if true;
       allow create: if false;
       allow update: if false;
       allow delete: if false;
     }

    /**
     * @description Restricts access to user profiles to the owning user.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their profile.
     * @allow (get, update, delete) User must be signed in and own the profile.
     * @deny create if the user id does not match the authenticated user id.
     * @deny get, update, delete if the user is not signed in or does not own the profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) ;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Restricts access to user addresses to the owning user.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (create) User must be signed in and own the parent profile.
     * @allow (get, update, delete, list) User must be signed in and own the parent profile.
     * @deny create if the user is not signed in or does not own the parent profile.
     * @deny get, update, delete, list if the user is not signed in or does not own the parent profile.
     * @principle Enforces document ownership for user addresses.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Restricts access to user orders to the owning user.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User must be signed in and own the parent profile.
     * @allow (get, update, delete, list) User must be signed in and own the parent profile.
     * @deny create if the user is not signed in or does not own the parent profile.
     * @deny get, update, delete, list if the user is not signed in or does not own the parent profile.
     * @principle Enforces document ownership for user orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Restricts access to user order items to the owning user.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (create) User must be signed in and own the grandparent profile.
     * @allow (get, update, delete, list) User must be signed in and own the grandparent profile.
     * @deny create if the user is not signed in or does not own the grandparent profile.
     * @deny get, update, delete, list if the user is not signed in or does not own the grandparent profile.
     * @principle Enforces document ownership for user order items.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Restricts access to user support tickets to the owning user.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (create) User must be signed in and own the parent profile.
     * @allow (get, update, delete, list) User must be signed in and own the parent profile.
     * @deny create if the user is not signed in or does not own the parent profile.
     * @deny get, update, delete, list if the user is not signed in or does not own the parent profile.
     * @principle Enforces document ownership for user support tickets.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Restricts access to user chat messages to the owning user.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (create) User must be signed in and own the great-grandparent profile.
     * @allow (get, update, delete, list) User must be signed in and own the great-grandparent profile.
     * @deny create if the user is not signed in or does not own the great-grandparent profile.
     * @deny get, update, delete, list if the user is not signed in or does not own the great-grandparent profile.
     * @principle Enforces document ownership for user chat messages.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}