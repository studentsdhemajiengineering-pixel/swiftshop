/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user-specific data
 * and allows public read access for product catalogs and branding settings.
 *
 * Data Structure:
 * - /categories/{categoryId}: Publicly readable product categories.
 * - /products/{productId}: Publicly readable product details.
 * - /settings/branding: Publicly readable, but only admin-writable, branding settings.
 * - /users/{userId}: User profiles, accessible only by the owning user.
 * - /users/{userId}/addresses/{addressId}: Addresses owned by a specific user.
 * - /users/{userId}/orders/{orderId}: Orders placed by a specific user.
 * - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Order items within a user's order.
 * - /users/{userId}/supportTickets/{supportTicketId}: Support tickets created by a user.
 * - /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}: Chat messages within a support ticket.
 *
 * Key Security Decisions:
 * - User-owned data is strictly controlled, preventing cross-user data access.
 * - Public read access is granted for product catalogs and branding settings.
 * - The exact schema of data is not enforced during this prototyping phase,
 *   focusing on authorization and relational integrity.
 * - Listing of support tickets and chat messages is allowed for the owner.
 *
 * Denormalization for Authorization:
 * - User ID is embedded within documents to avoid `get()` calls for ownership checks.
 *
 * Structural Segregation:
 * - Private user data is stored under the `/users/{userId}` collection to avoid
 *   mixing public and private data within the same collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read categories.
     * @path /categories/{categoryId}
     * @allow (get, list) Unauthenticated user can read a category.
     * @deny (create, update, delete) No one can create, update, or delete categories.
     * @principle Allows public read access for product catalogs.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read products.
     * @path /products/{productId}
     * @allow (get, list) Unauthenticated user can read a product.
     * @deny (create, update, delete) No one can create, update, or delete products.
     * @principle Allows public read access for product catalogs.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read branding settings, but only admins can modify them.
     * @path /settings/branding
     * @allow (get) Unauthenticated user can read branding settings.
     * @deny (create, update, delete) No one can create, update, or delete branding settings.
     * @principle Allows public read access but restricts write access for branding settings.
     */
    match /settings/branding {
      allow get: if true;
      allow create, update, delete: if false; // TODO: Implement admin-only writes
    }

    /**
     * @description Allows a user to read, update and delete their own profile.  Allows creation only with matching user id.
     * @path /users/{userId}
     * @allow (get, update, delete) Authenticated user can manage their own profile.
     * @allow (create) Authenticated user can create their profile if the userId matches their auth uid.
     * @deny (get, update, delete) Authenticated user cannot manage another user's profile.
     * @deny (create) Authenticated user cannot create a profile with a mismatched userId.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own addresses.  Allows creation only with matching user id.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (get, update, delete) Authenticated user can manage their own address.
     * @allow (create) Authenticated user can create their address if the userId matches their auth uid.
     * @deny (get, update, delete) Authenticated user cannot manage another user's address.
     * @deny (create) Authenticated user cannot create an address with a mismatched userId.
     * @principle Enforces document ownership for user addresses.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own orders. Allows creation only with matching user id.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, update, delete) Authenticated user can manage their own order.
     * @allow (create) Authenticated user can create their order if the userId matches their auth uid.
     * @deny (get, update, delete) Authenticated user cannot manage another user's order.
     * @deny (create) Authenticated user cannot create an order with a mismatched userId.
     * @principle Enforces document ownership for user orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own order items.  Allows creation only with matching user id.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, update, delete) Authenticated user can manage their own order item.
     * @allow (create) Authenticated user can create their order item if the userId matches their auth uid.
     * @deny (get, update, delete) Authenticated user cannot manage another user's order item.
     * @deny (create) Authenticated user cannot create an order item with a mismatched userId.
     * @principle Enforces document ownership for user order items.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId); // No userId to check
      allow update: if isOwner(userId); // No userId to check
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own support tickets.  Allows creation only with matching user id.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (get, update, delete) Authenticated user can manage their own support ticket.
     * @allow (create) Authenticated user can create their support ticket if the userId matches their auth uid.
     * @deny (get, update, delete) Authenticated user cannot manage another user's support ticket.
     * @deny (create) Authenticated user cannot create a support ticket with a mismatched userId.
     * @principle Enforces document ownership for user support tickets.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own chat messages within their support tickets.  Allows creation only with matching user id.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (get, update, delete) Authenticated user can manage their own chat message.
     * @allow (create) Authenticated user can create their chat message if the userId matches their auth uid.
     * @deny (get, update, delete) Authenticated user cannot manage another user's chat message.
     * @deny (create) Authenticated user cannot create a chat message with a mismatched userId.
     * @principle Enforces document ownership for user chat messages.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId); // No userId to check
      allow update: if isOwner(userId); // No userId to check
      allow delete: if isExistingOwner(userId);
    }

        /**
     * @description Stores all orders. Writable by admins, readable by specific users.
     * @path /orders/{orderId}
     * @allow (get) Authenticated user can read an order.
     * @deny (create, update, delete) No one can create, update, or delete order.
     */
     match /orders/{orderId} {
        allow get: if isSignedIn(); //TODO: Implement read by admins or the user who placed the order
        allow list: if false;
        allow create, update, delete: if false; //TODO: Implement admin-only writes
      }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}