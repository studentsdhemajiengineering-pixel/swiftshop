/**
 * @fileoverview Firestore Security Rules for SwiftShop.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and public-read with owner-write patterns.
 * User-specific data (profiles, addresses, orders, support tickets) is strictly controlled by the individual user.
 * Categories and branding settings are publicly readable but have restricted write access (to be defined later, likely admin-only).
 * Products have open read access.
 *
 * Data Structure:
 * - /categories/{categoryId}: Grocery categories (public read).
 * - /products/{productId}: Product details (public read).
 * - /settings/branding: Branding settings (public read, restricted write).
 * - /users/{userId}: User profiles (owner-only access).
 * - /users/{userId}/addresses/{addressId}: User addresses (owner-only access).
 * - /users/{userId}/orders/{orderId}: User orders (owner-only access).
 * - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Order items (owner-only access).
 * - /users/{userId}/supportTickets/{supportTicketId}: Support tickets (owner-only access).
 * - /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}: Chat messages (owner-only access).
 * - /orders/{orderId}: All orders (restricted read/write, access control to be defined later).
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 * - In this prototyping phase, data validation is limited to authorization-critical fields.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to categories. Write access is denied.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read categories.
     * @deny (create, update, delete): No user can create, update, or delete categories.
     * @principle Allows public read access.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to products. Write access is denied.
     * @path /products/{productId}
     * @allow (get, list): Any user can read products.
     * @deny (create, update, delete): No user can create, update, or delete products.
     * @principle Allows public read access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to branding settings. Write access is denied.
     * @path /settings/branding
     * @allow (get): Any user can read branding settings.
     * @deny (create, update, delete, list): No user can create, update, or delete branding settings, and listing the settings collection is not allowed.
     * @principle Allows public read access.
     */
    match /settings/branding {
      allow get: if true;
      allow list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (get, list): The user can read their own profile.
     * @allow (create): A user can create their profile if the userId matches their auth UID.
     * @allow (update, delete): The user can update/delete their own profile if the userId matches their auth UID and the document exists.
     *   Example (update): User 'user123' can update /users/user123 if they are authenticated as 'user123'.
     * @deny (get, list): User 'user456' cannot read user 'user123' profile.
     * @deny (create): User 'user456' cannot create profile 'user123'.
     * @deny (update, delete): User 'user456' cannot update/delete user 'user123' profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user addresses.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (get, list): The user can read their own addresses.
     * @allow (create): A user can create an address under their profile.
     * @allow (update, delete): The user can update/delete their own addresses.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list): The user can read their own orders.
     * @allow (create): A user can create an order under their profile.
     * @allow (update, delete): The user can update/delete their own orders.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for order items within a user's order.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list): The user can read their own order items.
     * @allow (create): A user can create an order item under their order.
     * @allow (update, delete): The user can update/delete their own order items.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (get, list): The user can read their own support tickets.
     * @allow (create): A user can create a support ticket under their profile.
     * @allow (update, delete): The user can update/delete their own support tickets.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for chat messages within a user's support ticket.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (get, list): The user can read their own chat messages.
     * @allow (create): A user can create a chat message under their support ticket.
     * @allow (update, delete): The user can update/delete their own chat messages.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to all orders. Access control to be defined later (likely admin-only).
     * @path /orders/{orderId}
     * @deny (get, list, create, update, delete): No user can get, list, create, update, or delete orders.
     * @principle Restricts access to a specific collection.
     */
    match /orders/{orderId} {
      allow get, list, create, update, delete: if false; // TODO: Define access control
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}