/**
 * @fileoverview Firestore Security Rules for SwiftShop.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, addresses, orders, orderItems, support tickets, and chat messages.
 * Categories and Branding Settings are publicly readable, while products are readable only by authenticated users.
 *
 * Data Structure:
 * - Categories: `/categories/{categoryId}` (Publicly readable)
 * - Products: `/products/{productId}` (Readable by authenticated users)
 * - Settings: `/settings/branding` (Publicly readable, admin writable - TODO: Implement Admin Role)
 * - Users: `/users/{userId}` (User-owned data)
 *   - Addresses: `/users/{userId}/addresses/{addressId}` (User-owned data)
 *   - Orders: `/users/{userId}/orders/{orderId}` (User-owned data)
 *     - OrderItems: `/users/{userId}/orders/{orderId}/orderItems/{orderItemId}` (User-owned data)
 *   - SupportTickets: `/users/{userId}/supportTickets/{supportTicketId}` (User-owned data)
 *     - ChatMessages: `/users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}` (User-owned data)
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Ambiguous relationships default to strict owner-only access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to categories.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category data.
     * @deny (create, update, delete): No user can create, update, or delete category data.
     * @principle Allows public read access for browsing.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows authenticated users to read product details.
     * @path /products/{productId}
     * @allow (get, list): Authenticated users can read product details.
     * @deny (create, update, delete): No user can create, update, or delete product data.
     * @principle Authenticated read access.
     */
    match /products/{productId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to branding settings and restricts writes.
     * @path /settings/branding
     * @allow (get): Any user can read branding settings.
     * @deny (create, update, delete): No user can create, update, or delete branding settings. // TODO: Implement Admin Role for write access
     * @principle Public read access with restricted writes.
     */
    match /settings/branding {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages user profiles with owner-only access.
     * @path /users/{userId}
     * @allow (create): The user can create their own profile if the userId matches their auth ID.
     * @allow (get, update, delete, list): The user can only access their own profile.
     * @deny: Any other operation is denied.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user addresses with owner-only access.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (get, list): The user can access their own addresses.
     * @allow (create): The user can create addresses under their profile.
     * @allow (update, delete): The user can update and delete their own addresses.
     * @deny: Any other operation is denied.
     * @principle Enforces document ownership for user addresses.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user orders with owner-only access.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list): The user can access their own orders.
     * @allow (create): The user can create orders under their profile.
     * @allow (update, delete): The user can update and delete their own orders.
     * @deny: Any other operation is denied.
     * @principle Enforces document ownership for user orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages order items with owner-only access.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list): The user can access their own order items.
     * @allow (create): The user can create order items under their order.
     * @allow (update, delete): The user can update and delete their own order items.
     * @deny: Any other operation is denied.
     * @principle Enforces document ownership for user order items.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages support tickets with owner-only access.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (get, list): The user can access their own support tickets.
     * @allow (create): The user can create support tickets under their profile.
     * @allow (update, delete): The user can update and delete their own support tickets.
     * @deny: Any other operation is denied.
     * @principle Enforces document ownership for user support tickets.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages chat messages within a support ticket with owner-only access.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (get, list): The user can access chat messages within their own support ticket.
     * @allow (create): The user can create chat messages under their support ticket.
     * @allow (update, delete): The user can update and delete their own chat messages.
     * @deny: Any other operation is denied.
     * @principle Enforces document ownership for user chat messages within support tickets.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores all orders. Writable by admins, readable by specific users.
     * @path /orders/{orderId}
     */
    match /orders/{orderId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}