/**
 * @description This ruleset enforces a combination of public read access, user-owned data trees, and role-based restrictions.
 * Data is organized hierarchically under collections like /users/{userId}, /categories, and /settings.
 *
 * @data_structure
 * - /categories/{categoryId}: Publicly readable categories.
 * - /products/{productId}: Products with unknown write access.
 * - /settings/branding: Publicly readable branding settings, writable by admins.
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /users/{userId}/addresses/{addressId}: User addresses, accessible only by the user.
 * - /users/{userId}/orders/{orderId}: User orders, accessible only by the user.
 * - /users/{userId}/supportTickets/{supportTicketId}: User support tickets, accessible only by the user.
 *
 * @key_security_decisions
 * - Listing of users is disallowed.
 * - Ambiguous write access for /products is denied for now. A TODO has been added.
 *
 * @denormalization_for_authorization None is necessary for these rules.
 * @structural_segregation User data is segregated under the /users/{userId} collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read categories, but only authenticated users can create new categories.
     * @path /categories/{categoryId}
     * @allow (get, list): Anyone can read category data.
     * @allow (create): Authenticated users can create new categories.
     * @deny (update, delete): No one can update or delete categories.
     * @principle Public read, authenticated create.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Currently denies all access to products.  The data model needs an owner or admin field to set useful write rules.
     * @path /products/{productId}
     * @allow (get, list): Anyone can read product data.
     * @deny (create, update, delete): No one can create, update, or delete products without an ownership field.
     * @principle Missing ownership field.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read the branding settings, but only allows admins to write.
     * @path /settings/branding
     * @allow (get): Anyone can read branding settings.
     * @deny (create, update, delete): No write access is allowed.
     * @principle Public read, admin write (not yet implemented).
     */
    match /settings/branding {
      allow get: if true;
      allow create, update, delete: if false; // TODO: Implement admin-only write access.
    }

    /**
     * @description Only the user can read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list): Only the user with matching userId.
     * @deny (all): Any other user.
     * @principle Enforces document ownership.
     */
    match /users/{userId} {
      allow get, update, delete: if isOwner(userId) && resource != null;
      allow create: if isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Only the user can read and write their own address data.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (get, create, update, delete, list): Only the user with matching userId.
     * @deny (all): Any other user.
     * @principle Enforces document ownership for nested data.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get, update, delete: if isOwner(userId) && resource != null;
      allow create: if isOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Only the user can read and write their own order data.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, create, update, delete, list): Only the user with matching userId.
     * @deny (all): Any other user.
     * @principle Enforces document ownership for nested data.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, update, delete: if isOwner(userId) && resource != null;
      allow create: if isOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Only the user can read and write their own order item data.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, create, update, delete, list): Only the user with matching userId.
     * @deny (all): Any other user.
     * @principle Enforces document ownership for deeply nested data.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get, update, delete: if isOwner(userId) && resource != null;
      allow create: if isOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Only the user can read and write their own support ticket data.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (get, create, update, delete, list): Only the user with matching userId.
     * @deny (all): Any other user.
     * @principle Enforces document ownership for nested data.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get, update, delete: if isOwner(userId) && resource != null;
      allow create: if isOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Only the user can read and write their own chat message data.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (get, create, update, delete, list): Only the user with matching userId.
     * @deny (all): Any other user.
     * @principle Enforces document ownership for deeply nested data.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get, update, delete: if isOwner(userId) && resource != null;
      allow create: if isOwner(userId);
      allow list: if isOwner(userId);
    }

     /**
      * @description Stores all orders. Writable by admins, readable by specific users.
      * @path /orders/{orderId}
      * @allow (get): Authenticated user
      * @deny (create, update, delete): No write access is allowed.
      */
    match /orders/{orderId} {
      allow get: if isSignedIn();
      allow create, update, delete: if false; // TODO: Implement admin-only write access.
      allow list: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}