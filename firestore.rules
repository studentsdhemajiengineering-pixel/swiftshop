/**
 * @fileOverview Firestore Security Rules for SwiftShop.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * and allows public read access to product catalog information. It prioritizes
 * simplicity and performance by denormalizing authorization data and avoiding
 * complex queries within the rules.
 *
 * Data Structure:
 * - /categories/{categoryId}: Publicly readable product categories.
 * - /products/{productId}: Publicly readable product details.
 * - /settings/branding: Public branding settings.
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /users/{userId}/addresses/{addressId}: User addresses, accessible only by the user.
 * - /users/{userId}/orders/{orderId}: User orders, accessible only by the user.
 * - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Order items, accessible only by the user.
 * - /users/{userId}/supportTickets/{supportTicketId}: Support tickets, accessible only by the user.
 * - /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}: Chat messages, accessible only by the user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Categories and Products are publicly readable.
 * - Strict ownership is enforced for all user-related data.
 * - No complex role-based access control is implemented in this prototype.
 *
 * Denormalization for Authorization:
 *  N/A - This ruleset does not require denormalization, all data is directly accessed via path-based ownership.
 *
 * Structural Segregation:
 *  Public (categories, products) and private (user data) are strictly segregated into different top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to category documents.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read category data.
     * @deny (create, update, delete) No one can create, update, or delete category data through the client.
     * @principle Allows public read access for browsing product categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to product documents.
     * @path /products/{productId}
     * @allow (get, list) Any user can read product data.
     * @deny (create, update, delete) No one can create, update, or delete product data through the client.
     * @principle Allows public read access for browsing products.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to branding settings.
     * @path /settings/branding
     * @allow (get, list) Any user can read branding settings.
     * @deny (create, update, delete) No one can create, update, or delete branding settings through the client.
     * @principle Allows public read access for branding settings.
     */
    match /settings/branding {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (get, update, delete) Only the user can access their own profile.
     * @allow (create) A user can create their own profile if the userId matches their auth UID.
     * @deny (get, update, delete) If the user is not signed in or the userId does not match the auth UID.
     * @deny (create) If the userId does not match the auth UID.
     * @deny (list) User listing is not permitted.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get, update, delete: if isSignedIn() && isOwner(userId) && resource != null;
      allow create: if isSignedIn() && isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Enforces user-ownership for user addresses.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (get, list, create, update, delete) Only the user can access their own addresses.
     * @deny (get, list, create, update, delete) If the user is not signed in or the userId does not match the auth UID.
     * @principle Enforces document ownership for user addresses.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces user-ownership for user orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list, create, update, delete) Only the user can access their own orders.
     * @deny (get, list, create, update, delete) If the user is not signed in or the userId does not match the auth UID.
     * @principle Enforces document ownership for user orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces user-ownership for order items.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list, create, update, delete) Only the user can access their own order items.
     * @deny (get, list, create, update, delete) If the user is not signed in or the userId does not match the auth UID.
     * @principle Enforces document ownership for order items.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces user-ownership for support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (get, list, create, update, delete) Only the user can access their own support tickets.
     * @deny (get, list, create, update, delete) If the user is not signed in or the userId does not match the auth UID.
     * @principle Enforces document ownership for support tickets.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces user-ownership for chat messages within support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (get, list, create, update, delete) Only the user can access their own chat messages.
     * @deny (get, list, create, update, delete) If the user is not signed in or the userId does not match the auth UID.
     * @principle Enforces document ownership for chat messages.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isOwner(userId) && resource != null;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}