/**
 * @fileoverview Firestore Security Rules for SwiftShop Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data and public read access for product catalog data. It ensures that only authenticated users can access and modify their own data (profiles, addresses, orders, support tickets), while allowing anyone to browse product categories.
 *
 * Data Structure:
 * - /categories/{categoryId}: Publicly readable collection of product categories.
 * - /products/{productId}: Publicly readable collection of product details.
 * - /users/{userId}: Collection of user profiles, accessible only by the user themselves.
 * - /users/{userId}/addresses/{addressId}: Collection of user addresses, accessible only by the user.
 * - /users/{userId}/orders/{orderId}: Collection of user orders, accessible only by the user.
 * - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Collection of order items, accessible only by the user.
 * - /users/{userId}/supportTickets/{supportTicketId}: Collection of user support tickets, accessible only by the user.
 * - /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}: Collection of chat messages, accessible only by the user.
 *
 * Key Security Decisions:
 * - Public read access is granted to the /categories and /products collections to allow for browsing without authentication.
 * - User listing is disallowed to protect user privacy.
 * - All user-specific data is nested under /users/{userId} to enforce strict ownership.
 * - No data validation is performed beyond ownership checks to enable rapid prototyping.
 * - Authorization independence is enforced by avoiding `get()` calls in security rules.
 *
 * Structural Segregation:
 * Categories and Products are stored in top-level collections with public read access, while user-specific data is stored in user subcollections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to categories.
     * @path /categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public access to read categories, but restricts write access.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

        /**
     * @description Allows public read access to products.
     * @path /products/{productId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public access to read products, but restricts write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to read, create, update, and delete their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) User can only access their own profile.
     * @deny If the user attempts to access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read, create, update, and delete their own addresses.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (get, create, update, delete, list) User can only access their own addresses.
     * @deny If the user attempts to access another user's addresses.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read, create, update, and delete their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, create, update, delete, list) User can only access their own orders.
     * @deny If the user attempts to access another user's orders.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read, create, update, and delete their own order items.
     * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, create, update, delete, list) User can only access their own order items.
     * @deny If the user attempts to access another user's order items.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read, create, update, and delete their own support tickets.
     * @path /users/{userId}/supportTickets/{supportTicketId}
     * @allow (get, create, update, delete, list) User can only access their own support tickets.
     * @deny If the user attempts to access another user's support tickets.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/supportTickets/{supportTicketId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read, create, update, and delete their own chat messages within a support ticket.
     * @path /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId}
     * @allow (get, create, update, delete, list) User can only access their own chat messages.
     * @deny If the user attempts to access another user's chat messages.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/supportTickets/{supportTicketId}/chatMessages/{chatMessageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper function to determine if the request is from the document owner.
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

    // Helper function to determine if the request is from the document owner for update and delete requests
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  // Helper function to determine if a user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}